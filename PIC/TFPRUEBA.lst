CCS PCM C Compiler, Version 5.115, 29001               10-mar.-25 14:02

               Filename:   C:\Users\Nelvinson\Documents\1- UNIVERSIDAD\8 - LABORATORIO DE CONTROL\0 - Repositorio Lab. Control\PIC\TFPRUEBA.lst

               ROM used:   628 words (8%)
                           Largest free fragment is 2048
               RAM used:   108 (29%) at main() level
                           120 (33%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   162
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.5
002A:  GOTO   02D
002B:  BTFSC  0C.5
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   051
.................... #include <16f877a.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
*
0079:  DATA B1,19
007A:  DATA B9,1A
007B:  DATA A0,16
007C:  DATA 0A,00
007D:  BSF    03.6
007E:  CLRF   1B
007F:  MOVF   04,W
0080:  MOVWF  1A
0081:  BCF    1B.0
0082:  BTFSC  03.7
0083:  BSF    1B.0
0084:  BTFSS  14.7
0085:  GOTO   08E
0086:  BSF    1A.7
0087:  BTFSS  1A.4
0088:  INCF   1A,F
0089:  COMF   13,F
008A:  COMF   14,F
008B:  INCF   13,F
008C:  BTFSC  03.2
008D:  INCF   14,F
008E:  SWAPF  14,W
008F:  IORLW  F0
0090:  MOVWF  16
0091:  ADDWF  16,F
0092:  ADDLW  E2
0093:  MOVWF  17
0094:  ADDLW  32
0095:  MOVWF  19
0096:  MOVF   14,W
0097:  ANDLW  0F
0098:  ADDWF  17,F
0099:  ADDWF  17,F
009A:  ADDWF  19,F
009B:  ADDLW  E9
009C:  MOVWF  18
009D:  ADDWF  18,F
009E:  ADDWF  18,F
009F:  SWAPF  13,W
00A0:  ANDLW  0F
00A1:  ADDWF  18,F
00A2:  ADDWF  19,F
00A3:  RLF    18,F
00A4:  RLF    19,F
00A5:  COMF   19,F
00A6:  RLF    19,F
00A7:  MOVF   13,W
00A8:  ANDLW  0F
00A9:  ADDWF  19,F
00AA:  RLF    16,F
00AB:  MOVLW  07
00AC:  MOVWF  15
00AD:  MOVLW  0A
00AE:  ADDWF  19,F
00AF:  DECF   18,F
00B0:  BTFSS  03.0
00B1:  GOTO   0AE
00B2:  ADDWF  18,F
00B3:  DECF   17,F
00B4:  BTFSS  03.0
00B5:  GOTO   0B2
00B6:  ADDWF  17,F
00B7:  DECF   16,F
00B8:  BTFSS  03.0
00B9:  GOTO   0B6
00BA:  ADDWF  16,F
00BB:  DECF   15,F
00BC:  BTFSS  03.0
00BD:  GOTO   0BA
00BE:  MOVLW  15
00BF:  MOVWF  04
00C0:  BSF    03.7
00C1:  MOVLW  07
00C2:  ANDWF  1A,W
00C3:  BCF    1A.6
00C4:  DECF   04,F
00C5:  ANDWF  1A,W
00C6:  BTFSS  03.2
00C7:  GOTO   0CF
00C8:  BTFSC  1A.4
00C9:  INCF   04,F
00CA:  BTFSC  1A.4
00CB:  GOTO   0CF
00CC:  MOVLW  20
00CD:  MOVWF  77
00CE:  GOTO   0EC
00CF:  ADDWF  04,F
00D0:  MOVLW  19
00D1:  SUBWF  04,W
00D2:  BTFSC  03.2
00D3:  BSF    1A.6
00D4:  MOVF   00,W
00D5:  MOVWF  77
00D6:  BTFSS  03.2
00D7:  GOTO   0E0
00D8:  BTFSC  1A.6
00D9:  GOTO   0E0
00DA:  BTFSC  1A.4
00DB:  GOTO   0F2
00DC:  BTFSC  1A.3
00DD:  GOTO   0E0
00DE:  MOVLW  20
00DF:  GOTO   0EB
00E0:  BTFSS  1A.7
00E1:  GOTO   0E8
00E2:  MOVLW  2D
00E3:  MOVWF  77
00E4:  DECF   04,F
00E5:  BCF    1A.6
00E6:  BCF    1A.7
00E7:  GOTO   0EC
00E8:  BSF    1A.3
00E9:  BCF    1A.4
00EA:  MOVLW  30
00EB:  ADDWF  77,F
00EC:  MOVF   77,W
00ED:  BCF    03.6
00EE:  BTFSS  0C.4
00EF:  GOTO   0EE
00F0:  MOVWF  19
00F1:  BSF    03.6
00F2:  INCF   04,F
00F3:  BTFSS  1A.6
00F4:  GOTO   0D0
00F5:  BCF    03.6
00F6:  BCF    0A.3
00F7:  BCF    0A.4
00F8:  GOTO   23A (RETURN)
*
010E:  MOVF   0B,W
010F:  BSF    03.6
0110:  MOVWF  11
0111:  BCF    03.6
0112:  BCF    0B.7
0113:  BSF    03.5
0114:  BSF    03.6
0115:  BSF    0C.7
0116:  BSF    0C.0
0117:  NOP
0118:  NOP
0119:  BCF    03.5
011A:  BTFSS  11.7
011B:  GOTO   11F
011C:  BCF    03.6
011D:  BSF    0B.7
011E:  BSF    03.6
011F:  MOVF   0C,W
0120:  ANDLW  7F
0121:  BTFSC  03.2
0122:  GOTO   15E
0123:  MOVWF  11
0124:  MOVF   0D,W
0125:  MOVWF  12
0126:  MOVF   0F,W
0127:  MOVWF  13
0128:  MOVF   11,W
0129:  BCF    03.6
012A:  BTFSS  0C.4
012B:  GOTO   12A
012C:  MOVWF  19
012D:  BSF    03.6
012E:  MOVF   12,W
012F:  MOVWF  0D
0130:  MOVF   13,W
0131:  MOVWF  0F
0132:  BCF    03.6
0133:  MOVF   0B,W
0134:  BSF    03.6
0135:  MOVWF  14
0136:  BCF    03.6
0137:  BCF    0B.7
0138:  BSF    03.5
0139:  BSF    03.6
013A:  BSF    0C.7
013B:  BSF    0C.0
013C:  NOP
013D:  NOP
013E:  BCF    03.5
013F:  BTFSS  14.7
0140:  GOTO   144
0141:  BCF    03.6
0142:  BSF    0B.7
0143:  BSF    03.6
0144:  RLF    0C,W
0145:  RLF    0E,W
0146:  ANDLW  7F
0147:  BTFSC  03.2
0148:  GOTO   15E
0149:  MOVWF  11
014A:  MOVF   0D,W
014B:  MOVWF  12
014C:  MOVF   0F,W
014D:  MOVWF  13
014E:  MOVF   11,W
014F:  BCF    03.6
0150:  BTFSS  0C.4
0151:  GOTO   150
0152:  MOVWF  19
0153:  BSF    03.6
0154:  MOVF   12,W
0155:  MOVWF  0D
0156:  MOVF   13,W
0157:  MOVWF  0F
0158:  INCF   0D,F
0159:  BTFSC  03.2
015A:  INCF   0F,F
015B:  BCF    03.6
015C:  GOTO   10E
015D:  BSF    03.6
015E:  BCF    03.6
015F:  BCF    0A.3
0160:  BCF    0A.4
0161:  GOTO   25B (RETURN)
.................... 
.................... #list
.................... 
.................... 
.................... #use delay(clock=4MHz)
*
00F9:  MOVLW  12
00FA:  MOVWF  04
00FB:  BSF    03.7
00FC:  MOVF   00,W
00FD:  BTFSC  03.2
00FE:  GOTO   10D
00FF:  MOVLW  01
0100:  MOVWF  78
0101:  CLRF   77
0102:  DECFSZ 77,F
0103:  GOTO   102
0104:  DECFSZ 78,F
0105:  GOTO   101
0106:  MOVLW  4A
0107:  MOVWF  77
0108:  DECFSZ 77,F
0109:  GOTO   108
010A:  GOTO   10B
010B:  DECFSZ 00,F
010C:  GOTO   0FF
010D:  RETURN
.................... //#fuses XT, NOWDT, NOPLLEN, NOLVP
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, stream=PC, parity=N, bits=8)
.................... 
.................... #define ARRAY_SIZE 40 // 256 ms * 40 = 10.24 seconds
.................... 
.................... // Pre-calculated RPM values for a first-order system with a settling time of 10 seconds
.................... int16 rpm_values[ARRAY_SIZE] = {
....................     0, 136, 259, 370, 470, 560, 642, 716, 782, 842,
....................     897, 946, 990, 1030, 1066, 1098, 1127, 1154, 1178, 1199,
....................     1219, 1236, 1252, 1267, 1280, 1291, 1302, 1311, 1320, 1328,
....................     1335, 1341, 1347, 1352, 1356, 1361, 1364, 1368, 1371, 1374
.................... };
*
017B:  CLRF   20
017C:  CLRF   21
017D:  MOVLW  88
017E:  MOVWF  22
017F:  CLRF   23
0180:  MOVLW  03
0181:  MOVWF  24
0182:  MOVLW  01
0183:  MOVWF  25
0184:  MOVLW  72
0185:  MOVWF  26
0186:  MOVLW  01
0187:  MOVWF  27
0188:  MOVLW  D6
0189:  MOVWF  28
018A:  MOVLW  01
018B:  MOVWF  29
018C:  MOVLW  30
018D:  MOVWF  2A
018E:  MOVLW  02
018F:  MOVWF  2B
0190:  MOVLW  82
0191:  MOVWF  2C
0192:  MOVLW  02
0193:  MOVWF  2D
0194:  MOVLW  CC
0195:  MOVWF  2E
0196:  MOVLW  02
0197:  MOVWF  2F
0198:  MOVLW  0E
0199:  MOVWF  30
019A:  MOVLW  03
019B:  MOVWF  31
019C:  MOVLW  4A
019D:  MOVWF  32
019E:  MOVLW  03
019F:  MOVWF  33
01A0:  MOVLW  81
01A1:  MOVWF  34
01A2:  MOVLW  03
01A3:  MOVWF  35
01A4:  MOVLW  B2
01A5:  MOVWF  36
01A6:  MOVLW  03
01A7:  MOVWF  37
01A8:  MOVLW  DE
01A9:  MOVWF  38
01AA:  MOVLW  03
01AB:  MOVWF  39
01AC:  MOVLW  06
01AD:  MOVWF  3A
01AE:  MOVLW  04
01AF:  MOVWF  3B
01B0:  MOVLW  2A
01B1:  MOVWF  3C
01B2:  MOVLW  04
01B3:  MOVWF  3D
01B4:  MOVLW  4A
01B5:  MOVWF  3E
01B6:  MOVLW  04
01B7:  MOVWF  3F
01B8:  MOVLW  67
01B9:  MOVWF  40
01BA:  MOVLW  04
01BB:  MOVWF  41
01BC:  MOVLW  82
01BD:  MOVWF  42
01BE:  MOVLW  04
01BF:  MOVWF  43
01C0:  MOVLW  9A
01C1:  MOVWF  44
01C2:  MOVLW  04
01C3:  MOVWF  45
01C4:  MOVLW  AF
01C5:  MOVWF  46
01C6:  MOVLW  04
01C7:  MOVWF  47
01C8:  MOVLW  C3
01C9:  MOVWF  48
01CA:  MOVLW  04
01CB:  MOVWF  49
01CC:  MOVLW  D4
01CD:  MOVWF  4A
01CE:  MOVLW  04
01CF:  MOVWF  4B
01D0:  MOVLW  E4
01D1:  MOVWF  4C
01D2:  MOVLW  04
01D3:  MOVWF  4D
01D4:  MOVLW  F3
01D5:  MOVWF  4E
01D6:  MOVLW  04
01D7:  MOVWF  4F
01D8:  CLRF   50
01D9:  MOVLW  05
01DA:  MOVWF  51
01DB:  MOVLW  0B
01DC:  MOVWF  52
01DD:  MOVLW  05
01DE:  MOVWF  53
01DF:  MOVLW  16
01E0:  MOVWF  54
01E1:  MOVLW  05
01E2:  MOVWF  55
01E3:  MOVLW  1F
01E4:  MOVWF  56
01E5:  MOVLW  05
01E6:  MOVWF  57
01E7:  MOVLW  28
01E8:  MOVWF  58
01E9:  MOVLW  05
01EA:  MOVWF  59
01EB:  MOVLW  30
01EC:  MOVWF  5A
01ED:  MOVLW  05
01EE:  MOVWF  5B
01EF:  MOVLW  37
01F0:  MOVWF  5C
01F1:  MOVLW  05
01F2:  MOVWF  5D
01F3:  MOVLW  3D
01F4:  MOVWF  5E
01F5:  MOVLW  05
01F6:  MOVWF  5F
01F7:  MOVLW  43
01F8:  MOVWF  60
01F9:  MOVLW  05
01FA:  MOVWF  61
01FB:  MOVLW  48
01FC:  MOVWF  62
01FD:  MOVLW  05
01FE:  MOVWF  63
01FF:  MOVLW  4C
0200:  MOVWF  64
0201:  MOVLW  05
0202:  MOVWF  65
0203:  MOVLW  51
0204:  MOVWF  66
0205:  MOVLW  05
0206:  MOVWF  67
0207:  MOVLW  54
0208:  MOVWF  68
0209:  MOVLW  05
020A:  MOVWF  69
020B:  MOVLW  58
020C:  MOVWF  6A
020D:  MOVLW  05
020E:  MOVWF  6B
020F:  MOVLW  5B
0210:  MOVWF  6C
0211:  MOVLW  05
0212:  MOVWF  6D
0213:  MOVLW  5E
0214:  MOVWF  6E
0215:  MOVLW  05
0216:  MOVWF  6F
.................... 
.................... volatile int datos_listos = 0;
.................... volatile int i = 0;
.................... char buffer[3];
.................... int imprimir = 0;
.................... int bucle = 0;
.................... #INT_RDA
.................... void RDA_isr() {
*
0051:  BTFSS  0C.5
0052:  GOTO   051
0053:  MOVF   1A,W
0054:  BSF    03.6
0055:  MOVWF  1C
....................     char c = getc();
....................     if (c == 0xFF) { // Caracter de inicio
0056:  INCFSZ 1C,W
0057:  GOTO   05B
....................         i = 0; // Reinicia el índice del buffer
0058:  BCF    03.6
0059:  CLRF   2C
005A:  BSF    03.6
....................     }
....................     buffer[i] = c;
005B:  MOVLW  2D
005C:  BCF    03.6
005D:  ADDWF  2C,W
005E:  MOVWF  04
005F:  BCF    03.7
0060:  BSF    03.6
0061:  MOVF   1C,W
0062:  MOVWF  00
....................     i++;
0063:  BCF    03.6
0064:  INCF   2C,F
....................     if (i >= 3) { // Longitud de la trama de datos
0065:  MOVF   2C,W
0066:  SUBLW  02
0067:  BTFSC  03.0
0068:  GOTO   06C
....................         datos_listos = 1;
0069:  MOVLW  01
006A:  MOVWF  2B
....................         i = 0; // Reinicia el índice del buffer
006B:  CLRF   2C
....................     }
....................     if(buffer[0] == 0xFF && buffer[2] == 0x01){
006C:  INCFSZ 2D,W
006D:  GOTO   074
006E:  DECFSZ 2F,W
006F:  GOTO   074
....................        imprimir = 1;
0070:  MOVLW  01
0071:  MOVWF  30
....................        bucle = 1;
0072:  MOVWF  31
....................     }else{
0073:  GOTO   075
....................       imprimir = 0;
0074:  CLRF   30
....................     }
0075:  BCF    0C.5
0076:  BCF    0A.3
0077:  BCF    0A.4
0078:  GOTO   02D
.................... }
.................... 
.................... void main() {
*
0162:  MOVF   03,W
0163:  ANDLW  1F
0164:  MOVWF  03
0165:  MOVLW  19
0166:  BSF    03.5
0167:  MOVWF  19
0168:  MOVLW  A6
0169:  MOVWF  18
016A:  MOVLW  90
016B:  BCF    03.5
016C:  MOVWF  18
016D:  CLRF   2B
016E:  CLRF   2C
016F:  CLRF   30
0170:  CLRF   31
0171:  CLRF   33
0172:  CLRF   32
0173:  BSF    03.5
0174:  BSF    1F.0
0175:  BSF    1F.1
0176:  BSF    1F.2
0177:  BCF    1F.3
0178:  MOVLW  07
0179:  MOVWF  1C
017A:  BCF    03.7
....................     enable_interrupts(INT_RDA);
*
0217:  BSF    0C.5
....................     enable_interrupts(GLOBAL);
0218:  MOVLW  C0
0219:  BCF    03.5
021A:  IORWF  0B,F
.................... 
....................     // Continuar enviando el valor final hasta recibir la trama FF 00 00
....................     while (true) {
....................     
....................         if(imprimir){
021B:  MOVF   30,F
021C:  BTFSC  03.2
021D:  GOTO   266
....................             // Enviar los valores pre-calculados
....................           if(bucle){
021E:  MOVF   31,F
021F:  BTFSC  03.2
0220:  GOTO   254
....................           
....................           for (int j = 0; j < ARRAY_SIZE; j++) {
0221:  BSF    03.6
0222:  CLRF   10
0223:  MOVF   10,W
0224:  SUBLW  27
0225:  BTFSS  03.0
0226:  GOTO   252
....................               printf("%ld -\n", rpm_values[j]); // Send RPM value via serial
0227:  BCF    03.0
0228:  RLF    10,W
0229:  ADDLW  A0
022A:  MOVWF  04
022B:  BCF    03.7
022C:  INCF   04,F
022D:  MOVF   00,W
022E:  MOVWF  12
022F:  DECF   04,F
0230:  MOVF   00,W
0231:  MOVWF  11
0232:  MOVLW  10
0233:  MOVWF  04
0234:  MOVF   12,W
0235:  MOVWF  14
0236:  MOVF   11,W
0237:  MOVWF  13
0238:  BCF    03.6
0239:  GOTO   07D
023A:  MOVLW  20
023B:  BTFSS  0C.4
023C:  GOTO   23B
023D:  MOVWF  19
023E:  MOVLW  2D
023F:  BTFSS  0C.4
0240:  GOTO   23F
0241:  MOVWF  19
0242:  MOVLW  0A
0243:  BTFSS  0C.4
0244:  GOTO   243
0245:  MOVWF  19
....................               delay_ms(256); // Wait for 256 ms
0246:  MOVLW  02
0247:  BSF    03.6
0248:  MOVWF  11
0249:  MOVLW  80
024A:  MOVWF  12
024B:  BCF    03.6
024C:  CALL   0F9
024D:  BSF    03.6
024E:  DECFSZ 11,F
024F:  GOTO   249
0250:  INCF   10,F
0251:  GOTO   223
....................           }
....................           
....................           bucle = 0;
0252:  BCF    03.6
0253:  CLRF   31
....................           
....................           }
....................         
....................         
....................         printf("1395 -\n"); // Send final RPM value via serial
0254:  MOVLW  79
0255:  BSF    03.6
0256:  MOVWF  0D
0257:  MOVLW  00
0258:  MOVWF  0F
0259:  BCF    03.6
025A:  GOTO   10E
....................         delay_ms(256); // Wait for 256 ms
025B:  MOVLW  02
025C:  BSF    03.6
025D:  MOVWF  11
025E:  MOVLW  80
025F:  MOVWF  12
0260:  BCF    03.6
0261:  CALL   0F9
0262:  BSF    03.6
0263:  DECFSZ 11,F
0264:  GOTO   25E
0265:  BCF    03.6
....................          
....................         }
....................          
....................         // Verificar si se ha recibido la trama FF 00 00
....................         if (datos_listos) {
0266:  MOVF   2B,F
0267:  BTFSC  03.2
0268:  GOTO   272
....................             datos_listos = 0;
0269:  CLRF   2B
....................             if (buffer[0] == 0xFF && buffer[1] == 0x00 && buffer[2] == 0x00) {
026A:  INCFSZ 2D,W
026B:  GOTO   272
026C:  MOVF   2E,F
026D:  BTFSS  03.2
026E:  GOTO   272
026F:  MOVF   2F,F
0270:  BTFSC  03.2
....................                 break; // Salir del bucle si se recibe la trama FF 00 00
0271:  GOTO   273
....................             }
....................         }
0272:  GOTO   21B
....................     }
.................... }
0273:  SLEEP

Configuration Fuses:
   Word  1: 3F73   RC NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
