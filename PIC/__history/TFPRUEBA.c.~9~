#include <16f877a.h>

#use delay(clock=4MHz)
//#fuses XT, NOWDT, NOPLLEN, NOLVP
#use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, stream=PC, parity=N, bits=8)

#define ARRAY_SIZE 40 // 256 ms * 40 = 10.24 seconds

// Pre-calculated RPM values for a first-order system with a settling time of 10 seconds
float rpm_values[ARRAY_SIZE] = {
    0.00, 136.26, 259.27, 370.30, 470.52, 560.99, 642.65, 716.36, 782.90, 842.97,
    897.18, 946.12, 990.30, 1030.18, 1066.17, 1098.66, 1127.99, 1154.47, 1178.37, 1199.94,
    1219.41, 1236.99, 1252.85, 1267.18, 1280.10, 1291.77, 1302.31, 1311.82, 1320.40, 1328.15,
    1335.14, 1341.45, 1347.15, 1352.30, 1356.94, 1361.13, 1364.91, 1368.33, 1371.41, 1374.19
};

volatile int datos_listos = 0;
volatile int i = 0;
char buffer[3];

#INT_RDA
void RDA_isr() {
    char c = getc();
    if (c == 0xFF) { // Caracter de inicio
        i = 0; // Reinicia el índice del buffer
    }
    buffer[i] = c;
    i++;
    if (i >= 3) { // Longitud de la trama de datos
        datos_listos = 1;
        i = 0; // Reinicia el índice del buffer
    }
}

void main() {
    enable_interrupts(INT_RDA);
    enable_interrupts(GLOBAL);

    // Enviar los valores pre-calculados
    for (int j = 0; j < ARRAY_SIZE; j++) {
        printf("%.2f -\n", rpm_values[j]); // Send RPM value via serial
        delay_ms(256); // Wait for 256 ms
    }

    // Continuar enviando el valor final hasta recibir la trama FF 00 00
    while (true) {
        printf("1400.00 -\n"); // Send final RPM value via serial
        delay_ms(256); // Wait for 256 ms

        // Verificar si se ha recibido la trama FF 00 00
        if (datos_listos) {
            datos_listos = 0;
            if (buffer[0] == 0xFF && buffer[1] == 0x00 && buffer[2] == 0x00) {
                break; // Salir del bucle si se recibe la trama FF 00 00
            }
        }
    }
}