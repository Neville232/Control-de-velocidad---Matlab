CCS PCH C Compiler, Version 5.115, 29001               05-mar.-25 23:19

               Filename:   C:\Users\Nelvinson\Documents\1- UNIVERSIDAD\8 - LABORATORIO DE CONTROL\0 - Repositorio Lab. Control\PIC\CONTROLADOR.lst

               ROM used:   3386 bytes (10%)
                           Largest free fragment is 29378
               RAM used:   68 (3%) at main() level
                           116 (6%) worst case
               Stack used: 4 locations (2 in main + 2 for interrupts)
               Stack size: 31

*
0000:  GOTO   0BD4
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   070E
0060:  BTFSS  FF2.4
0062:  GOTO   006C
0066:  BTFSC  FF2.1
0068:  GOTO   01A0
006C:  BTFSS  F9D.5
006E:  GOTO   0078
0072:  BTFSC  F9E.5
0074:  GOTO   08E8
0078:  MOVFF  0E,00
007C:  MOVFF  0F,01
0080:  MOVFF  10,02
0084:  MOVFF  11,03
0088:  MOVFF  0C,FE9
008C:  MOVFF  07,FEA
0090:  BSF    07.7
0092:  MOVFF  08,FE1
0096:  MOVFF  09,FE2
009A:  MOVFF  0A,FD9
009E:  MOVFF  0B,FDA
00A2:  MOVFF  12,FF3
00A6:  MOVFF  13,FF4
00AA:  MOVFF  14,FFA
00AE:  MOVFF  15,FF5
00B2:  MOVFF  16,FF6
00B6:  MOVFF  17,FF7
00BA:  MOVF   04,W
00BC:  MOVFF  06,FE0
00C0:  MOVFF  05,FD8
00C4:  RETFIE 0
.................... #include <18F45K50.h>
.................... //////////// Standard Header file for the PIC18F45K50 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F45K50
00C6:  CLRF   FF7
00C8:  ADDLW  D6
00CA:  MOVWF  FF6
00CC:  MOVLW  00
00CE:  ADDWFC FF7,F
00D0:  TBLRD*+
00D2:  MOVF   FF5,W
00D4:  RETURN 0
00D6:  DATA 00,00
00D8:  DATA 03,00
00DA:  DATA 07,00
00DC:  DATA 0A,00
00DE:  DATA 0E,00
00E0:  DATA 11,00
00E2:  DATA 15,00
00E4:  DATA 18,00
00E6:  DATA 1C,00
00E8:  DATA 20,00
00EA:  DATA 23,00
00EC:  DATA 27,00
00EE:  DATA 2A,00
00F0:  DATA 2E,00
00F2:  DATA 31,00
00F4:  DATA 35,00
00F6:  DATA 38,00
00F8:  DATA 3C,00
00FA:  DATA 40,00
00FC:  DATA 43,00
00FE:  DATA 47,00
0100:  DATA 4A,00
0102:  DATA 4E,00
0104:  DATA 51,00
0106:  DATA 55,00
0108:  DATA 59,00
010A:  DATA 5C,00
010C:  DATA 60,00
010E:  DATA 63,00
0110:  DATA 67,00
0112:  DATA 6A,00
0114:  DATA 6E,00
0116:  DATA 71,00
0118:  DATA 75,00
011A:  DATA 79,00
011C:  DATA 7C,00
011E:  DATA 80,00
0120:  DATA 83,00
0122:  DATA 87,00
0124:  DATA 8A,00
0126:  DATA 8E,00
0128:  DATA 91,00
012A:  DATA 95,00
012C:  DATA 99,00
012E:  DATA 9C,00
0130:  DATA A0,00
0132:  DATA A3,00
0134:  DATA A7,00
0136:  DATA AA,00
0138:  DATA AE,00
013A:  DATA B2,00
013C:  DATA B5,00
013E:  DATA B9,00
0140:  DATA BC,00
0142:  DATA C0,00
0144:  DATA C3,00
0146:  DATA C7,00
0148:  DATA CA,00
014A:  DATA CE,00
014C:  DATA D2,00
014E:  DATA D5,00
0150:  DATA D9,00
0152:  DATA DC,00
0154:  DATA E0,00
0156:  DATA E3,00
0158:  DATA E7,00
015A:  DATA EA,00
015C:  DATA EE,00
015E:  DATA F2,00
0160:  DATA F5,00
0162:  DATA F9,00
0164:  DATA FC,00
0166:  DATA 00,01
0168:  DATA 03,01
016A:  DATA 07,01
016C:  DATA 0B,01
016E:  DATA 0E,01
0170:  DATA 12,01
0172:  DATA 15,01
0174:  DATA 19,01
0176:  DATA 1C,01
0178:  DATA 20,01
017A:  DATA 23,01
017C:  DATA 27,01
017E:  DATA 2B,01
0180:  DATA 2E,01
0182:  DATA 32,01
0184:  DATA 35,01
0186:  DATA 39,01
0188:  DATA 3C,01
018A:  DATA 40,01
018C:  DATA 43,01
018E:  DATA 47,01
0190:  DATA 4B,01
0192:  DATA 4E,01
0194:  DATA 52,01
0196:  DATA 55,01
0198:  DATA 59,01
019A:  DATA 5C,01
019C:  DATA 60,01
019E:  DATA 64,01
*
01A8:  MOVLW  8E
01AA:  MOVWF  00
01AC:  MOVFF  61,01
01B0:  MOVFF  60,02
01B4:  CLRF   03
01B6:  MOVF   01,F
01B8:  BNZ   01CC
01BA:  MOVFF  02,01
01BE:  CLRF   02
01C0:  MOVLW  08
01C2:  SUBWF  00,F
01C4:  MOVF   01,F
01C6:  BNZ   01CC
01C8:  CLRF   00
01CA:  BRA    01DC
01CC:  BCF    FD8.0
01CE:  BTFSC  01.7
01D0:  BRA    01DA
01D2:  RLCF   02,F
01D4:  RLCF   01,F
01D6:  DECF   00,F
01D8:  BRA    01CC
01DA:  BCF    01.7
01DC:  RETURN 0
01DE:  MOVF   x68,W
01E0:  BTFSC  FD8.2
01E2:  BRA    02C6
01E4:  MOVWF  00
01E6:  MOVF   x6C,W
01E8:  BTFSC  FD8.2
01EA:  BRA    02C6
01EC:  ADDWF  00,F
01EE:  BNC   01F8
01F0:  MOVLW  81
01F2:  ADDWF  00,F
01F4:  BC    02C6
01F6:  BRA    0200
01F8:  MOVLW  7F
01FA:  SUBWF  00,F
01FC:  BNC   02C6
01FE:  BZ    02C6
0200:  MOVFF  69,70
0204:  MOVF   x6D,W
0206:  XORWF  x70,F
0208:  BSF    x69.7
020A:  BSF    x6D.7
020C:  MOVF   x6B,W
020E:  MULWF  x6F
0210:  MOVFF  FF4,72
0214:  MOVF   x6A,W
0216:  MULWF  x6E
0218:  MOVFF  FF4,03
021C:  MOVFF  FF3,71
0220:  MULWF  x6F
0222:  MOVF   FF3,W
0224:  ADDWF  x72,F
0226:  MOVF   FF4,W
0228:  ADDWFC x71,F
022A:  MOVLW  00
022C:  ADDWFC 03,F
022E:  MOVF   x6B,W
0230:  MULWF  x6E
0232:  MOVF   FF3,W
0234:  ADDWF  x72,F
0236:  MOVF   FF4,W
0238:  ADDWFC x71,F
023A:  MOVLW  00
023C:  CLRF   02
023E:  ADDWFC 03,F
0240:  ADDWFC 02,F
0242:  MOVF   x69,W
0244:  MULWF  x6F
0246:  MOVF   FF3,W
0248:  ADDWF  x71,F
024A:  MOVF   FF4,W
024C:  ADDWFC 03,F
024E:  MOVLW  00
0250:  ADDWFC 02,F
0252:  MOVF   x69,W
0254:  MULWF  x6E
0256:  MOVF   FF3,W
0258:  ADDWF  03,F
025A:  MOVF   FF4,W
025C:  ADDWFC 02,F
025E:  MOVLW  00
0260:  CLRF   01
0262:  ADDWFC 01,F
0264:  MOVF   x6B,W
0266:  MULWF  x6D
0268:  MOVF   FF3,W
026A:  ADDWF  x71,F
026C:  MOVF   FF4,W
026E:  ADDWFC 03,F
0270:  MOVLW  00
0272:  ADDWFC 02,F
0274:  ADDWFC 01,F
0276:  MOVF   x6A,W
0278:  MULWF  x6D
027A:  MOVF   FF3,W
027C:  ADDWF  03,F
027E:  MOVF   FF4,W
0280:  ADDWFC 02,F
0282:  MOVLW  00
0284:  ADDWFC 01,F
0286:  MOVF   x69,W
0288:  MULWF  x6D
028A:  MOVF   FF3,W
028C:  ADDWF  02,F
028E:  MOVF   FF4,W
0290:  ADDWFC 01,F
0292:  INCF   00,F
0294:  BTFSC  01.7
0296:  BRA    02A2
0298:  RLCF   x71,F
029A:  RLCF   03,F
029C:  RLCF   02,F
029E:  RLCF   01,F
02A0:  DECF   00,F
02A2:  MOVLW  00
02A4:  BTFSS  x71.7
02A6:  BRA    02BC
02A8:  INCF   03,F
02AA:  ADDWFC 02,F
02AC:  ADDWFC 01,F
02AE:  MOVF   01,W
02B0:  BNZ   02BC
02B2:  MOVF   02,W
02B4:  BNZ   02BC
02B6:  MOVF   03,W
02B8:  BNZ   02BC
02BA:  INCF   00,F
02BC:  BTFSC  x70.7
02BE:  BSF    01.7
02C0:  BTFSS  x70.7
02C2:  BCF    01.7
02C4:  BRA    02CE
02C6:  CLRF   00
02C8:  CLRF   01
02CA:  CLRF   02
02CC:  CLRF   03
02CE:  RETURN 0
02D0:  MOVF   x60,W
02D2:  BTFSC  FD8.2
02D4:  BRA    0420
02D6:  MOVWF  x6C
02D8:  MOVF   x64,W
02DA:  BTFSC  FD8.2
02DC:  BRA    0420
02DE:  SUBWF  x6C,F
02E0:  BNC   02EC
02E2:  MOVLW  7F
02E4:  ADDWF  x6C,F
02E6:  BTFSC  FD8.0
02E8:  BRA    0420
02EA:  BRA    02F8
02EC:  MOVLW  81
02EE:  SUBWF  x6C,F
02F0:  BTFSS  FD8.0
02F2:  BRA    0420
02F4:  BTFSC  FD8.2
02F6:  BRA    0420
02F8:  MOVFF  6C,00
02FC:  CLRF   01
02FE:  CLRF   02
0300:  CLRF   03
0302:  CLRF   x6B
0304:  MOVFF  61,6A
0308:  BSF    x6A.7
030A:  MOVFF  62,69
030E:  MOVFF  63,68
0312:  MOVLW  19
0314:  MOVWF  x6C
0316:  MOVF   x67,W
0318:  SUBWF  x68,F
031A:  BC    0336
031C:  MOVLW  01
031E:  SUBWF  x69,F
0320:  BC    0336
0322:  SUBWF  x6A,F
0324:  BC    0336
0326:  SUBWF  x6B,F
0328:  BC    0336
032A:  INCF   x6B,F
032C:  INCF   x6A,F
032E:  INCF   x69,F
0330:  MOVF   x67,W
0332:  ADDWF  x68,F
0334:  BRA    0386
0336:  MOVF   x66,W
0338:  SUBWF  x69,F
033A:  BC    0360
033C:  MOVLW  01
033E:  SUBWF  x6A,F
0340:  BC    0360
0342:  SUBWF  x6B,F
0344:  BC    0360
0346:  INCF   x6B,F
0348:  INCF   x6A,F
034A:  MOVF   x66,W
034C:  ADDWF  x69,F
034E:  MOVF   x67,W
0350:  ADDWF  x68,F
0352:  BNC   0386
0354:  INCF   x69,F
0356:  BNZ   0386
0358:  INCF   x6A,F
035A:  BNZ   0386
035C:  INCF   x6B,F
035E:  BRA    0386
0360:  MOVF   x65,W
0362:  IORLW  80
0364:  SUBWF  x6A,F
0366:  BC    0384
0368:  MOVLW  01
036A:  SUBWF  x6B,F
036C:  BC    0384
036E:  INCF   x6B,F
0370:  MOVF   x65,W
0372:  IORLW  80
0374:  ADDWF  x6A,F
0376:  MOVF   x66,W
0378:  ADDWF  x69,F
037A:  BNC   034E
037C:  INCF   x6A,F
037E:  BNZ   034E
0380:  INCF   x6B,F
0382:  BRA    034E
0384:  BSF    03.0
0386:  DECFSZ x6C,F
0388:  BRA    038C
038A:  BRA    03A2
038C:  BCF    FD8.0
038E:  RLCF   x68,F
0390:  RLCF   x69,F
0392:  RLCF   x6A,F
0394:  RLCF   x6B,F
0396:  BCF    FD8.0
0398:  RLCF   03,F
039A:  RLCF   02,F
039C:  RLCF   01,F
039E:  RLCF   x6D,F
03A0:  BRA    0316
03A2:  BTFSS  x6D.0
03A4:  BRA    03B2
03A6:  BCF    FD8.0
03A8:  RRCF   01,F
03AA:  RRCF   02,F
03AC:  RRCF   03,F
03AE:  RRCF   x6D,F
03B0:  BRA    03B6
03B2:  DECF   00,F
03B4:  BZ    0420
03B6:  BTFSC  x6D.7
03B8:  BRA    03F6
03BA:  BCF    FD8.0
03BC:  RLCF   x68,F
03BE:  RLCF   x69,F
03C0:  RLCF   x6A,F
03C2:  RLCF   x6B,F
03C4:  MOVF   x67,W
03C6:  SUBWF  x68,F
03C8:  BC    03D8
03CA:  MOVLW  01
03CC:  SUBWF  x69,F
03CE:  BC    03D8
03D0:  SUBWF  x6A,F
03D2:  BC    03D8
03D4:  SUBWF  x6B,F
03D6:  BNC   040C
03D8:  MOVF   x66,W
03DA:  SUBWF  x69,F
03DC:  BC    03E8
03DE:  MOVLW  01
03E0:  SUBWF  x6A,F
03E2:  BC    03E8
03E4:  SUBWF  x6B,F
03E6:  BNC   040C
03E8:  MOVF   x65,W
03EA:  IORLW  80
03EC:  SUBWF  x6A,F
03EE:  BC    03F6
03F0:  MOVLW  01
03F2:  SUBWF  x6B,F
03F4:  BNC   040C
03F6:  INCF   03,F
03F8:  BNZ   040C
03FA:  INCF   02,F
03FC:  BNZ   040C
03FE:  INCF   01,F
0400:  BNZ   040C
0402:  INCF   00,F
0404:  BZ    0420
0406:  RRCF   01,F
0408:  RRCF   02,F
040A:  RRCF   03,F
040C:  MOVFF  61,6C
0410:  MOVF   x65,W
0412:  XORWF  x6C,F
0414:  BTFSS  x6C.7
0416:  BRA    041C
0418:  BSF    01.7
041A:  BRA    0428
041C:  BCF    01.7
041E:  BRA    0428
0420:  CLRF   00
0422:  CLRF   01
0424:  CLRF   02
0426:  CLRF   03
0428:  GOTO   0782 (RETURN)
042C:  MOVFF  5D,64
0430:  MOVF   x61,W
0432:  XORWF  x64,F
0434:  BTFSS  x64.7
0436:  BRA    0442
0438:  BCF    FD8.2
043A:  BCF    FD8.0
043C:  BTFSC  5D.7
043E:  BSF    FD8.0
0440:  BRA    04A0
0442:  MOVFF  5D,64
0446:  MOVFF  60,65
044A:  MOVF   5C,W
044C:  SUBWF  x65,F
044E:  BZ    045C
0450:  BTFSS  x64.7
0452:  BRA    04A0
0454:  MOVF   FD8,W
0456:  XORLW  01
0458:  MOVWF  FD8
045A:  BRA    04A0
045C:  MOVFF  61,65
0460:  MOVF   5D,W
0462:  SUBWF  x65,F
0464:  BZ    0472
0466:  BTFSS  x64.7
0468:  BRA    04A0
046A:  MOVF   FD8,W
046C:  XORLW  01
046E:  MOVWF  FD8
0470:  BRA    04A0
0472:  MOVFF  62,65
0476:  MOVF   5E,W
0478:  SUBWF  x65,F
047A:  BZ    0488
047C:  BTFSS  x64.7
047E:  BRA    04A0
0480:  MOVF   FD8,W
0482:  XORLW  01
0484:  MOVWF  FD8
0486:  BRA    04A0
0488:  MOVFF  63,65
048C:  MOVF   5F,W
048E:  SUBWF  x65,F
0490:  BZ    049E
0492:  BTFSS  x64.7
0494:  BRA    04A0
0496:  MOVF   FD8,W
0498:  XORLW  01
049A:  MOVWF  FD8
049C:  BRA    04A0
049E:  BCF    FD8.0
04A0:  GOTO   07AE (RETURN)
04A4:  MOVLW  80
04A6:  BTFSC  FD8.1
04A8:  XORWF  x69,F
04AA:  CLRF   x6E
04AC:  CLRF   x6F
04AE:  MOVFF  65,6D
04B2:  MOVF   x69,W
04B4:  XORWF  x6D,F
04B6:  MOVF   x64,W
04B8:  BTFSC  FD8.2
04BA:  BRA    0674
04BC:  MOVWF  x6C
04BE:  MOVWF  00
04C0:  MOVF   x68,W
04C2:  BTFSC  FD8.2
04C4:  BRA    0686
04C6:  SUBWF  x6C,F
04C8:  BTFSC  FD8.2
04CA:  BRA    05CE
04CC:  BNC   0548
04CE:  MOVFF  69,72
04D2:  BSF    x72.7
04D4:  MOVFF  6A,71
04D8:  MOVFF  6B,70
04DC:  CLRF   x6F
04DE:  BCF    FD8.0
04E0:  RRCF   x72,F
04E2:  RRCF   x71,F
04E4:  RRCF   x70,F
04E6:  RRCF   x6F,F
04E8:  DECFSZ x6C,F
04EA:  BRA    04DC
04EC:  BTFSS  x6D.7
04EE:  BRA    04F6
04F0:  BSF    x6E.0
04F2:  BRA    06AE
04F4:  BCF    x6E.0
04F6:  BCF    x6C.0
04F8:  BSF    x6E.4
04FA:  CLRF   FEA
04FC:  MOVLW  67
04FE:  MOVWF  FE9
0500:  BRA    06D4
0502:  BCF    x6E.4
0504:  BTFSC  x6D.7
0506:  BRA    051C
0508:  BTFSS  x6C.0
050A:  BRA    0532
050C:  RRCF   x72,F
050E:  RRCF   x71,F
0510:  RRCF   x70,F
0512:  RRCF   x6F,F
0514:  INCF   00,F
0516:  BTFSC  FD8.2
0518:  BRA    06A4
051A:  BRA    0532
051C:  BTFSC  x72.7
051E:  BRA    0538
0520:  BCF    FD8.0
0522:  RLCF   x6F,F
0524:  RLCF   x70,F
0526:  RLCF   x71,F
0528:  RLCF   x72,F
052A:  DECF   00,F
052C:  BTFSC  FD8.2
052E:  BRA    06A4
0530:  BRA    051C
0532:  BSF    x6E.6
0534:  BRA    060C
0536:  BCF    x6E.6
0538:  MOVFF  65,6D
053C:  BTFSS  x65.7
053E:  BRA    0544
0540:  BSF    x72.7
0542:  BRA    0696
0544:  BCF    x72.7
0546:  BRA    0696
0548:  MOVFF  68,6C
054C:  MOVFF  68,00
0550:  MOVF   x64,W
0552:  SUBWF  x6C,F
0554:  MOVFF  65,72
0558:  BSF    x72.7
055A:  MOVFF  66,71
055E:  MOVFF  67,70
0562:  CLRF   x6F
0564:  BCF    FD8.0
0566:  RRCF   x72,F
0568:  RRCF   x71,F
056A:  RRCF   x70,F
056C:  RRCF   x6F,F
056E:  DECFSZ x6C,F
0570:  BRA    0562
0572:  BTFSS  x6D.7
0574:  BRA    057C
0576:  BSF    x6E.1
0578:  BRA    06AE
057A:  BCF    x6E.1
057C:  BCF    x6C.0
057E:  BSF    x6E.5
0580:  CLRF   FEA
0582:  MOVLW  6B
0584:  MOVWF  FE9
0586:  BRA    06D4
0588:  BCF    x6E.5
058A:  BTFSC  x6D.7
058C:  BRA    05A2
058E:  BTFSS  x6C.0
0590:  BRA    05B8
0592:  RRCF   x72,F
0594:  RRCF   x71,F
0596:  RRCF   x70,F
0598:  RRCF   x6F,F
059A:  INCF   00,F
059C:  BTFSC  FD8.2
059E:  BRA    06A4
05A0:  BRA    05B8
05A2:  BTFSC  x72.7
05A4:  BRA    05BE
05A6:  BCF    FD8.0
05A8:  RLCF   x6F,F
05AA:  RLCF   x70,F
05AC:  RLCF   x71,F
05AE:  RLCF   x72,F
05B0:  DECF   00,F
05B2:  BTFSC  FD8.2
05B4:  BRA    06A4
05B6:  BRA    05A2
05B8:  BSF    x6E.7
05BA:  BRA    060C
05BC:  BCF    x6E.7
05BE:  MOVFF  69,6D
05C2:  BTFSS  x69.7
05C4:  BRA    05CA
05C6:  BSF    x72.7
05C8:  BRA    0696
05CA:  BCF    x72.7
05CC:  BRA    0696
05CE:  MOVFF  69,72
05D2:  BSF    x72.7
05D4:  MOVFF  6A,71
05D8:  MOVFF  6B,70
05DC:  BTFSS  x6D.7
05DE:  BRA    05E8
05E0:  BCF    x72.7
05E2:  BSF    x6E.2
05E4:  BRA    06AE
05E6:  BCF    x6E.2
05E8:  CLRF   x6F
05EA:  BCF    x6C.0
05EC:  CLRF   FEA
05EE:  MOVLW  67
05F0:  MOVWF  FE9
05F2:  BRA    06D4
05F4:  BTFSC  x6D.7
05F6:  BRA    0630
05F8:  MOVFF  65,6D
05FC:  BTFSS  x6C.0
05FE:  BRA    060C
0600:  RRCF   x72,F
0602:  RRCF   x71,F
0604:  RRCF   x70,F
0606:  RRCF   x6F,F
0608:  INCF   00,F
060A:  BZ    06A4
060C:  BTFSS  x6F.7
060E:  BRA    0626
0610:  INCF   x70,F
0612:  BNZ   0626
0614:  INCF   x71,F
0616:  BNZ   0626
0618:  INCF   x72,F
061A:  BNZ   0626
061C:  RRCF   x72,F
061E:  RRCF   x71,F
0620:  RRCF   x70,F
0622:  INCF   00,F
0624:  BZ    06A4
0626:  BTFSC  x6E.6
0628:  BRA    0536
062A:  BTFSC  x6E.7
062C:  BRA    05BC
062E:  BRA    0668
0630:  MOVLW  80
0632:  XORWF  x72,F
0634:  BTFSS  x72.7
0636:  BRA    0640
0638:  BRA    06AE
063A:  MOVFF  69,6D
063E:  BRA    0654
0640:  MOVFF  65,6D
0644:  MOVF   x72,F
0646:  BNZ   0654
0648:  MOVF   x71,F
064A:  BNZ   0654
064C:  MOVF   x70,F
064E:  BNZ   0654
0650:  CLRF   00
0652:  BRA    0696
0654:  BTFSC  x72.7
0656:  BRA    0668
0658:  BCF    FD8.0
065A:  RLCF   x6F,F
065C:  RLCF   x70,F
065E:  RLCF   x71,F
0660:  RLCF   x72,F
0662:  DECFSZ 00,F
0664:  BRA    0654
0666:  BRA    06A4
0668:  BTFSS  x6D.7
066A:  BRA    0670
066C:  BSF    x72.7
066E:  BRA    0696
0670:  BCF    x72.7
0672:  BRA    0696
0674:  MOVFF  68,00
0678:  MOVFF  69,72
067C:  MOVFF  6A,71
0680:  MOVFF  6B,70
0684:  BRA    0696
0686:  MOVFF  64,00
068A:  MOVFF  65,72
068E:  MOVFF  66,71
0692:  MOVFF  67,70
0696:  MOVFF  72,01
069A:  MOVFF  71,02
069E:  MOVFF  70,03
06A2:  BRA    070C
06A4:  CLRF   00
06A6:  CLRF   01
06A8:  CLRF   02
06AA:  CLRF   03
06AC:  BRA    070C
06AE:  CLRF   x6F
06B0:  COMF   x70,F
06B2:  COMF   x71,F
06B4:  COMF   x72,F
06B6:  COMF   x6F,F
06B8:  INCF   x6F,F
06BA:  BNZ   06C6
06BC:  INCF   x70,F
06BE:  BNZ   06C6
06C0:  INCF   x71,F
06C2:  BNZ   06C6
06C4:  INCF   x72,F
06C6:  BTFSC  x6E.0
06C8:  BRA    04F4
06CA:  BTFSC  x6E.1
06CC:  BRA    057A
06CE:  BTFSC  x6E.2
06D0:  BRA    05E6
06D2:  BRA    063A
06D4:  MOVF   FEF,W
06D6:  ADDWF  x70,F
06D8:  BNC   06E4
06DA:  INCF   x71,F
06DC:  BNZ   06E4
06DE:  INCF   x72,F
06E0:  BTFSC  FD8.2
06E2:  BSF    x6C.0
06E4:  MOVF   FED,F
06E6:  MOVF   FEF,W
06E8:  ADDWF  x71,F
06EA:  BNC   06F2
06EC:  INCF   x72,F
06EE:  BTFSC  FD8.2
06F0:  BSF    x6C.0
06F2:  MOVF   FED,F
06F4:  MOVF   FEF,W
06F6:  BTFSC  FEF.7
06F8:  BRA    06FC
06FA:  XORLW  80
06FC:  ADDWF  x72,F
06FE:  BTFSC  FD8.0
0700:  BSF    x6C.0
0702:  BTFSC  x6E.4
0704:  BRA    0502
0706:  BTFSC  x6E.5
0708:  BRA    0588
070A:  BRA    05F4
070C:  RETURN 0
*
091C:  DATA 25,2E
091E:  DATA 32,66
0920:  DATA 20,2D
0922:  DATA 0A,00
*
0954:  MOVF   4F,W
0956:  SUBLW  B6
0958:  MOVWF  4F
095A:  CLRF   03
095C:  MOVFF  50,53
0960:  BSF    50.7
0962:  BCF    FD8.0
0964:  RRCF   50,F
0966:  RRCF   51,F
0968:  RRCF   52,F
096A:  RRCF   03,F
096C:  RRCF   02,F
096E:  RRCF   01,F
0970:  RRCF   00,F
0972:  DECFSZ 4F,F
0974:  BRA    0962
0976:  BTFSS  53.7
0978:  BRA    0990
097A:  COMF   00,F
097C:  COMF   01,F
097E:  COMF   02,F
0980:  COMF   03,F
0982:  INCF   00,F
0984:  BTFSC  FD8.2
0986:  INCF   01,F
0988:  BTFSC  FD8.2
098A:  INCF   02,F
098C:  BTFSC  FD8.2
098E:  INCF   03,F
0990:  GOTO   0A7E (RETURN)
0994:  BTFSC  FD8.1
0996:  BRA    099E
0998:  CLRF   FEA
099A:  MOVLW  57
099C:  MOVWF  FE9
099E:  CLRF   00
09A0:  CLRF   01
09A2:  CLRF   02
09A4:  CLRF   03
09A6:  CLRF   57
09A8:  CLRF   58
09AA:  CLRF   59
09AC:  CLRF   5A
09AE:  MOVF   56,W
09B0:  IORWF  55,W
09B2:  IORWF  54,W
09B4:  IORWF  53,W
09B6:  BZ    0A10
09B8:  MOVLW  20
09BA:  MOVWF  5B
09BC:  BCF    FD8.0
09BE:  RLCF   4F,F
09C0:  RLCF   50,F
09C2:  RLCF   51,F
09C4:  RLCF   52,F
09C6:  RLCF   57,F
09C8:  RLCF   58,F
09CA:  RLCF   59,F
09CC:  RLCF   5A,F
09CE:  MOVF   56,W
09D0:  SUBWF  5A,W
09D2:  BNZ   09E4
09D4:  MOVF   55,W
09D6:  SUBWF  59,W
09D8:  BNZ   09E4
09DA:  MOVF   54,W
09DC:  SUBWF  58,W
09DE:  BNZ   09E4
09E0:  MOVF   53,W
09E2:  SUBWF  57,W
09E4:  BNC   0A04
09E6:  MOVF   53,W
09E8:  SUBWF  57,F
09EA:  MOVF   54,W
09EC:  BTFSS  FD8.0
09EE:  INCFSZ 54,W
09F0:  SUBWF  58,F
09F2:  MOVF   55,W
09F4:  BTFSS  FD8.0
09F6:  INCFSZ 55,W
09F8:  SUBWF  59,F
09FA:  MOVF   56,W
09FC:  BTFSS  FD8.0
09FE:  INCFSZ 56,W
0A00:  SUBWF  5A,F
0A02:  BSF    FD8.0
0A04:  RLCF   00,F
0A06:  RLCF   01,F
0A08:  RLCF   02,F
0A0A:  RLCF   03,F
0A0C:  DECFSZ 5B,F
0A0E:  BRA    09BC
0A10:  MOVFF  57,FEF
0A14:  MOVFF  58,FEC
0A18:  MOVFF  59,FEC
0A1C:  MOVFF  5A,FEC
0A20:  RETURN 0
0A22:  MOVF   FE9,W
0A24:  MOVWF  47
0A26:  MOVF   46,W
0A28:  MOVWF  49
0A2A:  BZ    0A6C
0A2C:  CLRF   19
0A2E:  BTFSC  FF2.7
0A30:  BSF    19.7
0A32:  BCF    FF2.7
0A34:  MOVFF  45,6B
0A38:  MOVFF  44,6A
0A3C:  MOVFF  43,69
0A40:  MOVFF  42,68
0A44:  CLRF   x6F
0A46:  CLRF   x6E
0A48:  MOVLW  20
0A4A:  MOVWF  x6D
0A4C:  MOVLW  82
0A4E:  MOVWF  x6C
0A50:  CALL   01DE
0A54:  BTFSC  19.7
0A56:  BSF    FF2.7
0A58:  MOVFF  03,45
0A5C:  MOVFF  02,44
0A60:  MOVFF  01,43
0A64:  MOVFF  00,42
0A68:  DECFSZ 49,F
0A6A:  BRA    0A2C
0A6C:  MOVFF  45,52
0A70:  MOVFF  44,51
0A74:  MOVFF  43,50
0A78:  MOVFF  42,4F
0A7C:  BRA    0954
0A7E:  MOVFF  03,45
0A82:  MOVFF  02,44
0A86:  MOVFF  01,43
0A8A:  MOVFF  00,42
0A8E:  BTFSS  45.7
0A90:  BRA    0AAC
0A92:  DECF   47,F
0A94:  BSF    47.5
0A96:  COMF   42,F
0A98:  COMF   43,F
0A9A:  COMF   44,F
0A9C:  COMF   45,F
0A9E:  INCF   42,F
0AA0:  BTFSC  FD8.2
0AA2:  INCF   43,F
0AA4:  BTFSC  FD8.2
0AA6:  INCF   44,F
0AA8:  BTFSC  FD8.2
0AAA:  INCF   45,F
0AAC:  MOVLW  3B
0AAE:  MOVWF  4E
0AB0:  MOVLW  9A
0AB2:  MOVWF  4D
0AB4:  MOVLW  CA
0AB6:  MOVWF  4C
0AB8:  CLRF   4B
0ABA:  MOVLW  0A
0ABC:  MOVWF  49
0ABE:  MOVF   46,W
0AC0:  BTFSC  FD8.2
0AC2:  INCF   47,F
0AC4:  BSF    FD8.1
0AC6:  CLRF   FEA
0AC8:  MOVLW  42
0ACA:  MOVWF  FE9
0ACC:  MOVFF  45,52
0AD0:  MOVFF  44,51
0AD4:  MOVFF  43,50
0AD8:  MOVFF  42,4F
0ADC:  MOVFF  4E,56
0AE0:  MOVFF  4D,55
0AE4:  MOVFF  4C,54
0AE8:  MOVFF  4B,53
0AEC:  RCALL  0994
0AEE:  MOVF   01,W
0AF0:  MOVF   00,F
0AF2:  BNZ   0B12
0AF4:  INCF   46,W
0AF6:  SUBWF  49,W
0AF8:  BZ    0B12
0AFA:  MOVF   47,W
0AFC:  BZ    0B16
0AFE:  ANDLW  0F
0B00:  SUBWF  49,W
0B02:  BZ    0B06
0B04:  BC    0B7C
0B06:  BTFSC  47.7
0B08:  BRA    0B7C
0B0A:  BTFSC  47.6
0B0C:  BRA    0B16
0B0E:  MOVLW  20
0B10:  BRA    0B72
0B12:  MOVLW  20
0B14:  ANDWF  47,F
0B16:  BTFSS  47.5
0B18:  BRA    0B34
0B1A:  BCF    47.5
0B1C:  MOVF   46,W
0B1E:  BTFSS  FD8.2
0B20:  DECF   47,F
0B22:  MOVF   00,W
0B24:  MOVWF  47
0B26:  MOVLW  2D
0B28:  BTFSS  F9E.4
0B2A:  BRA    0B28
0B2C:  MOVWF  FAD
0B2E:  MOVF   47,W
0B30:  MOVWF  00
0B32:  CLRF   47
0B34:  MOVF   46,W
0B36:  SUBWF  49,W
0B38:  BNZ   0B50
0B3A:  MOVF   00,W
0B3C:  MOVWF  47
0B3E:  MOVLW  2E
0B40:  BTFSS  F9E.4
0B42:  BRA    0B40
0B44:  MOVWF  FAD
0B46:  MOVF   47,W
0B48:  MOVWF  00
0B4A:  MOVLW  20
0B4C:  ANDWF  47,F
0B4E:  MOVLW  00
0B50:  MOVLW  30
0B52:  BTFSS  47.5
0B54:  BRA    0B72
0B56:  BCF    47.5
0B58:  MOVF   46,W
0B5A:  BTFSS  FD8.2
0B5C:  DECF   47,F
0B5E:  MOVF   00,W
0B60:  MOVWF  47
0B62:  MOVLW  2D
0B64:  BTFSS  F9E.4
0B66:  BRA    0B64
0B68:  MOVWF  FAD
0B6A:  MOVF   47,W
0B6C:  MOVWF  00
0B6E:  CLRF   47
0B70:  MOVLW  30
0B72:  ADDWF  00,F
0B74:  MOVF   00,W
0B76:  BTFSS  F9E.4
0B78:  BRA    0B76
0B7A:  MOVWF  FAD
0B7C:  BCF    FD8.1
0B7E:  MOVFF  4E,52
0B82:  MOVFF  4D,51
0B86:  MOVFF  4C,50
0B8A:  MOVFF  4B,4F
0B8E:  CLRF   56
0B90:  CLRF   55
0B92:  CLRF   54
0B94:  MOVLW  0A
0B96:  MOVWF  53
0B98:  RCALL  0994
0B9A:  MOVFF  03,4E
0B9E:  MOVFF  02,4D
0BA2:  MOVFF  01,4C
0BA6:  MOVFF  00,4B
0BAA:  DECFSZ 49,F
0BAC:  BRA    0AC4
0BAE:  GOTO   0D2C (RETURN)
0BB2:  TBLRD*+
0BB4:  MOVFF  FF6,43
0BB8:  MOVFF  FF7,44
0BBC:  MOVF   FF5,W
0BBE:  BTFSS  F9E.4
0BC0:  BRA    0BBE
0BC2:  MOVWF  FAD
0BC4:  MOVFF  43,FF6
0BC8:  MOVFF  44,FF7
0BCC:  DECFSZ 42,F
0BCE:  BRA    0BB2
0BD0:  GOTO   0D3A (RETURN)
.................... 
.................... #list
.................... 
.................... 
.................... #use delay(internal=4MHz)
.................... #fuses XT, NOWDT, NOPLLEN, NOLVP
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, stream=PC, parity=N, bits=8)
.................... 
.................... //==================== VARIABLES GLOBALES ====================
.................... 
.................... int timer2 = 88;                // Se carga timer 2 con 88 para obtener 700 Hz
.................... int poscaler = 1;               // Poscaler solo puede tomar valores de: 1
.................... volatile int int_encoder = 0;   // Contador del encoder
.................... volatile int count = 0;         // Contador para el Timer0
.................... int resolucion = 8;             // Resolucion del encoder (8 pulsos por vuelta)
.................... 
.................... int duty = 0;                  // Ciclo de trabajo inicial 
.................... int estado = 0;                 // Motor encendido o apagado
.................... 
.................... const int16 duty_porcentual[101] = {
....................     0, 3, 7, 10, 14, 17, 21, 24, 28, 32, 35, 39, 42, 46, 49, 53, 56, 60, 64, 67, 71, 74, 78, 81, 85, 89, 92, 96, 99, 103, 106, 110, 113, 117, 121, 124, 128, 131, 135, 138, 142, 145, 149, 153, 156, 160, 163, 167, 170, 174, 178, 181, 185, 188, 192, 195, 199, 202, 206, 210, 213, 217, 220, 224, 227, 231, 234, 238, 242, 245, 249, 252, 256, 259, 263, 267, 270, 274, 277, 281, 284, 288, 291, 295, 299, 302, 306, 309, 313, 316, 320, 323, 327, 331, 334, 338, 341, 345, 348, 352, 356
.................... };
.................... 
.................... /*const int16 duty_porcentual[11] = {
....................     0, 36, 72, 108, 144, 180, 216, 252, 288, 324, 356
.................... };*/
.................... 
.................... float rpm_actual = 0.0;         // Almacena el valor actual de RPM
.................... float rpm_anterior = 0.0;       // Almacena el valor anterior de RPM
.................... float rpm = 0.0;                // Almacena el valor filtrado de RPM
.................... float alpha = 0.8;              // Coeficiente de filtro exponencial
.................... float beta = 0.0;               // Ajuste del error
.................... 
.................... char buffer[10];                // Buffer para la trama
.................... volatile int i = 0;
.................... volatile int datos_listos = 0;
.................... volatile int rpm_listo = 0;     // Bandera que indica que el RPM fue actualizado
.................... 
.................... //==================== INTERRUPCIONES ====================
.................... 
.................... #INT_EXT                            // Interrupción externa (pulsos del encoder)
.................... void EXT_isr(){
....................     int_encoder++;                  // Incrementa contador del encoder
*
01A0:  INCF   1C,F
.................... }
.................... 
01A2:  BCF    FF2.1
01A4:  GOTO   0078
.................... #INT_TIMER0                         // Interrupción del Timer0 (cálculo de RPM)
.................... void TIMER0_isr(){
....................     set_timer0(6);                  // Precarga ajustada para 64 ms por interrupción
*
070E:  CLRF   FD7
0710:  MOVLW  06
0712:  MOVWF  FD6
0714:  NOP   
....................     count++;                        // Incrementar el contador
0716:  INCF   1D,F
.................... 
....................     if (count >= 4) {               // 256 ms
0718:  MOVF   1D,W
071A:  SUBLW  03
071C:  BTFSC  FD8.0
071E:  BRA    08E2
....................         count = 0;                // Reinicia el contador
0720:  CLRF   1D
.................... 
....................         rpm_actual = (int_encoder * 240.0) / resolucion; // Calcula RPM (60 * 4)
0722:  CLRF   x61
0724:  MOVFF  1C,60
0728:  RCALL  01A8
072A:  MOVFF  03,6B
072E:  MOVFF  02,6A
0732:  MOVFF  01,69
0736:  MOVFF  00,68
073A:  CLRF   x6F
073C:  CLRF   x6E
073E:  MOVLW  70
0740:  MOVWF  x6D
0742:  MOVLW  86
0744:  MOVWF  x6C
0746:  RCALL  01DE
0748:  MOVFF  03,5F
074C:  MOVFF  02,5E
0750:  MOVFF  01,5D
0754:  MOVFF  00,5C
0758:  CLRF   x61
075A:  MOVFF  1E,60
075E:  RCALL  01A8
0760:  MOVFF  5F,63
0764:  MOVFF  5E,62
0768:  MOVFF  5D,61
076C:  MOVFF  5C,60
0770:  MOVFF  03,67
0774:  MOVFF  02,66
0778:  MOVFF  01,65
077C:  MOVFF  00,64
0780:  BRA    02D0
0782:  MOVFF  03,24
0786:  MOVFF  02,23
078A:  MOVFF  01,22
078E:  MOVFF  00,21
....................         int_encoder = 0;          // Reinicia contador del encoder
0792:  CLRF   1C
.................... 
....................         if (rpm_anterior != 0) {  // Aplicar el filtro exponencial
0794:  MOVFF  28,5F
0798:  MOVFF  27,5E
079C:  MOVFF  26,5D
07A0:  MOVFF  25,5C
07A4:  CLRF   x63
07A6:  CLRF   x62
07A8:  CLRF   x61
07AA:  CLRF   x60
07AC:  BRA    042C
07AE:  BTFSC  FD8.2
07B0:  BRA    08BA
....................             rpm = (beta + 1) * (alpha * rpm_actual + ((1 - alpha) * rpm_anterior));
07B2:  BCF    FD8.1
07B4:  MOVFF  34,67
07B8:  MOVFF  33,66
07BC:  MOVFF  32,65
07C0:  MOVFF  31,64
07C4:  CLRF   x6B
07C6:  CLRF   x6A
07C8:  CLRF   x69
07CA:  MOVLW  7F
07CC:  MOVWF  x68
07CE:  RCALL  04A4
07D0:  MOVFF  03,5F
07D4:  MOVFF  02,5E
07D8:  MOVFF  01,5D
07DC:  MOVFF  00,5C
07E0:  MOVFF  30,6B
07E4:  MOVFF  2F,6A
07E8:  MOVFF  2E,69
07EC:  MOVFF  2D,68
07F0:  MOVFF  24,6F
07F4:  MOVFF  23,6E
07F8:  MOVFF  22,6D
07FC:  MOVFF  21,6C
0800:  RCALL  01DE
0802:  MOVFF  03,63
0806:  MOVFF  02,62
080A:  MOVFF  01,61
080E:  MOVFF  00,60
0812:  BSF    FD8.1
0814:  CLRF   x67
0816:  CLRF   x66
0818:  CLRF   x65
081A:  MOVLW  7F
081C:  MOVWF  x64
081E:  MOVFF  30,6B
0822:  MOVFF  2F,6A
0826:  MOVFF  2E,69
082A:  MOVFF  2D,68
082E:  RCALL  04A4
0830:  MOVFF  03,67
0834:  MOVFF  02,66
0838:  MOVFF  01,65
083C:  MOVFF  00,64
0840:  MOVFF  03,6B
0844:  MOVFF  02,6A
0848:  MOVFF  01,69
084C:  MOVFF  00,68
0850:  MOVFF  28,6F
0854:  MOVFF  27,6E
0858:  MOVFF  26,6D
085C:  MOVFF  25,6C
0860:  RCALL  01DE
0862:  BCF    FD8.1
0864:  MOVFF  63,67
0868:  MOVFF  62,66
086C:  MOVFF  61,65
0870:  MOVFF  60,64
0874:  MOVFF  03,6B
0878:  MOVFF  02,6A
087C:  MOVFF  01,69
0880:  MOVFF  00,68
0884:  RCALL  04A4
0886:  MOVFF  5F,6B
088A:  MOVFF  5E,6A
088E:  MOVFF  5D,69
0892:  MOVFF  5C,68
0896:  MOVFF  03,6F
089A:  MOVFF  02,6E
089E:  MOVFF  01,6D
08A2:  MOVFF  00,6C
08A6:  RCALL  01DE
08A8:  MOVFF  03,2C
08AC:  MOVFF  02,2B
08B0:  MOVFF  01,2A
08B4:  MOVFF  00,29
....................         } else {
08B8:  BRA    08CA
....................             rpm = rpm_actual;
08BA:  MOVFF  24,2C
08BE:  MOVFF  23,2B
08C2:  MOVFF  22,2A
08C6:  MOVFF  21,29
....................         }
....................         rpm_anterior = rpm;       // Actualiza rpm_anterior
08CA:  MOVFF  2C,28
08CE:  MOVFF  2B,27
08D2:  MOVFF  2A,26
08D6:  MOVFF  29,25
.................... 
....................         if (estado == 1) {        // Si el motor está encendido, notifica el nuevo RPM
08DA:  DECFSZ 20,W
08DC:  BRA    08E2
....................             rpm_listo = 1;
08DE:  MOVLW  01
08E0:  MOVWF  41
....................         }
....................     }
.................... }
.................... 
08E2:  BCF    FF2.2
08E4:  GOTO   0078
.................... #INT_RDA                            // Interrupción de recepción de datos seriales (RS232)
.................... void RDA_isr() {
08E8:  BTFSS  F9E.5
08EA:  BRA    08E8
08EC:  MOVFF  FAE,5C
....................     char c = getc();
....................     if (c == 0xFF) {                // Caracter de inicio
08F0:  INCFSZ 5C,W
08F2:  BRA    08F6
....................         i = 0;                      // Reinicia el índice del buffer
08F4:  CLRF   3F
....................     }
....................     buffer[i] = c;
08F6:  CLRF   03
08F8:  MOVF   3F,W
08FA:  ADDLW  35
08FC:  MOVWF  FE9
08FE:  MOVLW  00
0900:  ADDWFC 03,W
0902:  MOVWF  FEA
0904:  MOVFF  5C,FEF
....................     i++;
0908:  INCF   3F,F
....................     if (i >= 3) {                   // Longitud de la trama de datos
090A:  MOVF   3F,W
090C:  SUBLW  02
090E:  BC    0916
....................         datos_listos = 1;
0910:  MOVLW  01
0912:  MOVWF  40
....................         i = 0;                      // Reinicia el índice del buffer
0914:  CLRF   3F
....................     }
0916:  BCF    F9E.5
0918:  GOTO   0078
.................... }
.................... 
.................... //==================== FUNCIONES ====================
.................... void parsear_trama(char *buffer) {
....................     if (buffer[0] == 0xFF) {        // Verificar el caracter de inicio
*
0924:  MOVF   42,W
0926:  MOVWF  FE9
0928:  MOVFF  43,FEA
092C:  INCFSZ FEF,W
092E:  BRA    0950
....................         duty = buffer[1];
0930:  MOVLW  01
0932:  ADDWF  42,W
0934:  MOVWF  FE9
0936:  MOVLW  00
0938:  ADDWFC 43,W
093A:  MOVWF  FEA
093C:  MOVFF  FEF,1F
....................         estado = buffer[2];
0940:  MOVLW  02
0942:  ADDWF  42,W
0944:  MOVWF  FE9
0946:  MOVLW  00
0948:  ADDWFC 43,W
094A:  MOVWF  FEA
094C:  MOVFF  FEF,20
....................         // printf("Trama recibida: duty=%d, estado=%d\n", duty, estado); // Mensaje de depuración
....................     }
0950:  GOTO   0CCC (RETURN)
.................... }
.................... 
.................... void main(){
*
0BD4:  CLRF   FF8
0BD6:  BCF    FD0.7
0BD8:  BSF    07.7
0BDA:  MOVLW  50
0BDC:  MOVWF  FD3
0BDE:  CLRF   FD2
0BE0:  CLRF   F9B
0BE2:  BCF    FB8.3
0BE4:  MOVLW  19
0BE6:  MOVWF  FAF
0BE8:  MOVLW  A6
0BEA:  MOVWF  FAC
0BEC:  MOVLW  90
0BEE:  MOVWF  FAB
0BF0:  MOVLW  58
0BF2:  MOVWF  1A
0BF4:  MOVLW  01
0BF6:  MOVWF  1B
0BF8:  CLRF   1C
0BFA:  CLRF   1D
0BFC:  MOVLW  08
0BFE:  MOVWF  1E
0C00:  CLRF   1F
0C02:  CLRF   20
0C04:  CLRF   24
0C06:  CLRF   23
0C08:  CLRF   22
0C0A:  CLRF   21
0C0C:  CLRF   28
0C0E:  CLRF   27
0C10:  CLRF   26
0C12:  CLRF   25
0C14:  CLRF   2C
0C16:  CLRF   2B
0C18:  CLRF   2A
0C1A:  CLRF   29
0C1C:  MOVLW  CD
0C1E:  MOVWF  30
0C20:  MOVLW  CC
0C22:  MOVWF  2F
0C24:  MOVLW  4C
0C26:  MOVWF  2E
0C28:  MOVLW  7E
0C2A:  MOVWF  2D
0C2C:  CLRF   34
0C2E:  CLRF   33
0C30:  CLRF   32
0C32:  CLRF   31
0C34:  CLRF   3F
0C36:  CLRF   40
0C38:  CLRF   41
0C3A:  MOVLB  F
0C3C:  CLRF   x5B
0C3E:  CLRF   x5C
0C40:  CLRF   x5D
0C42:  CLRF   x5E
0C44:  CLRF   x5F
0C46:  CLRF   F9A
0C48:  CLRF   F99
0C4A:  CLRF   F98
....................     // Habilitar interrupciones
....................     enable_interrupts(INT_RDA);
0C4C:  BSF    F9D.5
....................     enable_interrupts(INT_EXT);
0C4E:  BSF    FF2.4
....................     enable_interrupts(INT_TIMER0);
0C50:  BSF    FF2.5
....................     enable_interrupts(GLOBAL);
0C52:  MOVLW  C0
0C54:  IORWF  FF2,F
.................... 
....................     // Configurar módulos y timers
....................     setup_timer_2(T2_DIV_BY_16, timer2, poscaler);             // Timer2 para PWM (700 Hz)
0C56:  MOVLW  01
0C58:  SUBWF  1B,W
0C5A:  MOVWF  01
0C5C:  RLCF   01,W
0C5E:  MOVWF  00
0C60:  RLCF   00,F
0C62:  RLCF   00,F
0C64:  MOVLW  F8
0C66:  ANDWF  00,F
0C68:  MOVF   00,W
0C6A:  IORLW  06
0C6C:  MOVWF  FBA
0C6E:  MOVFF  1A,FBB
....................     setup_ccp1(CCP_PWM);                                        // Configurar módulo CCP1 en modo PWM
0C72:  BCF    F94.2
0C74:  BCF    F8B.2
0C76:  MOVLW  0C
0C78:  MOVWF  FBD
0C7A:  CLRF   FB7
0C7C:  CLRF   FB6
0C7E:  MOVLW  01
0C80:  MOVWF  FB9
0C82:  BCF    x59.0
....................     setup_timer_0(RTCC_INTERNAL | RTCC_8_BIT | RTCC_DIV_256);   // Configurar Timer0
0C84:  MOVLW  C7
0C86:  MOVWF  FD5
.................... 
....................     set_pwm1_duty(duty_porcentual[duty]);
0C88:  BCF    FD8.0
0C8A:  RLCF   1F,W
0C8C:  CLRF   03
0C8E:  MOVLB  0
0C90:  CALL   00C6
0C94:  TBLRD*+
0C96:  MOVFF  FF5,03
0C9A:  MOVWF  42
0C9C:  MOVFF  03,43
0CA0:  RRCF   43,F
0CA2:  RRCF   42,F
0CA4:  RRCF   43,F
0CA6:  RRCF   42,F
0CA8:  RRCF   43,F
0CAA:  MOVFF  42,FBE
0CAE:  RRCF   43,F
0CB0:  RRCF   43,W
0CB2:  ANDLW  30
0CB4:  MOVWF  00
0CB6:  MOVF   FBD,W
0CB8:  ANDLW  CF
0CBA:  IORWF  00,W
0CBC:  MOVWF  FBD
.................... 
....................     while (true){
....................         if (datos_listos) {
0CBE:  MOVF   40,F
0CC0:  BZ    0D08
....................             datos_listos = 0;
0CC2:  CLRF   40
....................             parsear_trama(buffer);  // Parsear la trama de datos y actualizar variables
0CC4:  CLRF   43
0CC6:  MOVLW  35
0CC8:  MOVWF  42
0CCA:  BRA    0924
....................             
....................             if (estado) {
0CCC:  MOVF   20,F
0CCE:  BZ    0D06
....................                 set_pwm1_duty(duty_porcentual[duty]);
0CD0:  BCF    FD8.0
0CD2:  RLCF   1F,W
0CD4:  CLRF   03
0CD6:  CALL   00C6
0CDA:  TBLRD*+
0CDC:  MOVFF  FF5,03
0CE0:  MOVWF  42
0CE2:  MOVFF  03,43
0CE6:  RRCF   43,F
0CE8:  RRCF   42,F
0CEA:  RRCF   43,F
0CEC:  RRCF   42,F
0CEE:  RRCF   43,F
0CF0:  MOVFF  42,FBE
0CF4:  RRCF   43,F
0CF6:  RRCF   43,W
0CF8:  ANDLW  30
0CFA:  MOVWF  00
0CFC:  MOVF   FBD,W
0CFE:  ANDLW  CF
0D00:  IORWF  00,W
0D02:  MOVWF  FBD
....................                 //printf("Motor encendido: duty=%d\n", duty);
....................             } else {
0D04:  BRA    0D08
....................                 set_pwm1_duty(0);
0D06:  CLRF   FBE
....................                 //printf("Motor apagado\n");
....................             }
....................         }
....................         
....................         // Procesar la impresión del RPM fuera de la ISR
....................         if (rpm_listo) {
0D08:  MOVF   41,F
0D0A:  BZ    0D3A
....................             rpm_listo = 0;
0D0C:  CLRF   41
....................             if (estado) {
0D0E:  MOVF   20,F
0D10:  BZ    0D3A
....................                 printf("%.2f -\n", rpm);
0D12:  MOVLW  89
0D14:  MOVWF  FE9
0D16:  MOVFF  2C,45
0D1A:  MOVFF  2B,44
0D1E:  MOVFF  2A,43
0D22:  MOVFF  29,42
0D26:  MOVLW  02
0D28:  MOVWF  46
0D2A:  BRA    0A22
0D2C:  MOVLW  20
0D2E:  MOVWF  FF6
0D30:  MOVLW  09
0D32:  MOVWF  FF7
0D34:  MOVLW  03
0D36:  MOVWF  42
0D38:  BRA    0BB2
....................             }
....................         }
0D3A:  BRA    0CBE
....................     }
.................... }
0D3C:  SLEEP 

Configuration Fuses:
   Word  1: C121   PLL3X NOPLLEN NOCPUDIV LS48MHZ XT PRIMARY_SW FCMEN IESO
   Word  2: 3C5E   PUT BROWNOUT BORV19 NOLPBOR NOWDT WDT32768
   Word  3: D300   CCP2C1 PBADEN T3CKC0 SDOB3 MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
