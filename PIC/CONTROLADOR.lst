CCS PCH C Compiler, Version 5.115, 29001               05-mar.-25 22:39

               Filename:   C:\Users\Nelvinson\Documents\1- UNIVERSIDAD\8 - LABORATORIO DE CONTROL\0 - Repositorio Lab. Control\PIC\CONTROLADOR.lst

               ROM used:   3640 bytes (11%)
                           Largest free fragment is 29124
               RAM used:   70 (3%) at main() level
                           118 (6%) worst case
               Stack used: 4 locations (2 in main + 2 for interrupts)
               Stack size: 31

*
0000:  GOTO   0CA2
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   065A
0060:  BTFSS  FF2.4
0062:  GOTO   006C
0066:  BTFSC  FF2.1
0068:  GOTO   00EC
006C:  BTFSS  F9D.5
006E:  GOTO   0078
0072:  BTFSC  F9E.5
0074:  GOTO   0834
0078:  MOVFF  0E,00
007C:  MOVFF  0F,01
0080:  MOVFF  10,02
0084:  MOVFF  11,03
0088:  MOVFF  0C,FE9
008C:  MOVFF  07,FEA
0090:  BSF    07.7
0092:  MOVFF  08,FE1
0096:  MOVFF  09,FE2
009A:  MOVFF  0A,FD9
009E:  MOVFF  0B,FDA
00A2:  MOVFF  12,FF3
00A6:  MOVFF  13,FF4
00AA:  MOVFF  14,FFA
00AE:  MOVFF  15,FF5
00B2:  MOVFF  16,FF6
00B6:  MOVFF  17,FF7
00BA:  MOVF   04,W
00BC:  MOVFF  06,FE0
00C0:  MOVFF  05,FD8
00C4:  RETFIE 0
.................... #include <18F45K50.h>
.................... //////////// Standard Header file for the PIC18F45K50 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F45K50
00C6:  CLRF   FF7
00C8:  ADDLW  D6
00CA:  MOVWF  FF6
00CC:  MOVLW  00
00CE:  ADDWFC FF7,F
00D0:  TBLRD*+
00D2:  MOVF   FF5,W
00D4:  RETURN 0
00D6:  DATA 00,00
00D8:  DATA 24,00
00DA:  DATA 48,00
00DC:  DATA 6C,00
00DE:  DATA 90,00
00E0:  DATA B4,00
00E2:  DATA D8,00
00E4:  DATA FC,00
00E6:  DATA 20,01
00E8:  DATA 44,01
00EA:  DATA 64,01
*
00F4:  MOVLW  8E
00F6:  MOVWF  00
00F8:  MOVFF  63,01
00FC:  MOVFF  62,02
0100:  CLRF   03
0102:  MOVF   01,F
0104:  BNZ   0118
0106:  MOVFF  02,01
010A:  CLRF   02
010C:  MOVLW  08
010E:  SUBWF  00,F
0110:  MOVF   01,F
0112:  BNZ   0118
0114:  CLRF   00
0116:  BRA    0128
0118:  BCF    FD8.0
011A:  BTFSC  01.7
011C:  BRA    0126
011E:  RLCF   02,F
0120:  RLCF   01,F
0122:  DECF   00,F
0124:  BRA    0118
0126:  BCF    01.7
0128:  RETURN 0
012A:  MOVF   x6A,W
012C:  BTFSC  FD8.2
012E:  BRA    0212
0130:  MOVWF  00
0132:  MOVF   x6E,W
0134:  BTFSC  FD8.2
0136:  BRA    0212
0138:  ADDWF  00,F
013A:  BNC   0144
013C:  MOVLW  81
013E:  ADDWF  00,F
0140:  BC    0212
0142:  BRA    014C
0144:  MOVLW  7F
0146:  SUBWF  00,F
0148:  BNC   0212
014A:  BZ    0212
014C:  MOVFF  6B,72
0150:  MOVF   x6F,W
0152:  XORWF  x72,F
0154:  BSF    x6B.7
0156:  BSF    x6F.7
0158:  MOVF   x6D,W
015A:  MULWF  x71
015C:  MOVFF  FF4,74
0160:  MOVF   x6C,W
0162:  MULWF  x70
0164:  MOVFF  FF4,03
0168:  MOVFF  FF3,73
016C:  MULWF  x71
016E:  MOVF   FF3,W
0170:  ADDWF  x74,F
0172:  MOVF   FF4,W
0174:  ADDWFC x73,F
0176:  MOVLW  00
0178:  ADDWFC 03,F
017A:  MOVF   x6D,W
017C:  MULWF  x70
017E:  MOVF   FF3,W
0180:  ADDWF  x74,F
0182:  MOVF   FF4,W
0184:  ADDWFC x73,F
0186:  MOVLW  00
0188:  CLRF   02
018A:  ADDWFC 03,F
018C:  ADDWFC 02,F
018E:  MOVF   x6B,W
0190:  MULWF  x71
0192:  MOVF   FF3,W
0194:  ADDWF  x73,F
0196:  MOVF   FF4,W
0198:  ADDWFC 03,F
019A:  MOVLW  00
019C:  ADDWFC 02,F
019E:  MOVF   x6B,W
01A0:  MULWF  x70
01A2:  MOVF   FF3,W
01A4:  ADDWF  03,F
01A6:  MOVF   FF4,W
01A8:  ADDWFC 02,F
01AA:  MOVLW  00
01AC:  CLRF   01
01AE:  ADDWFC 01,F
01B0:  MOVF   x6D,W
01B2:  MULWF  x6F
01B4:  MOVF   FF3,W
01B6:  ADDWF  x73,F
01B8:  MOVF   FF4,W
01BA:  ADDWFC 03,F
01BC:  MOVLW  00
01BE:  ADDWFC 02,F
01C0:  ADDWFC 01,F
01C2:  MOVF   x6C,W
01C4:  MULWF  x6F
01C6:  MOVF   FF3,W
01C8:  ADDWF  03,F
01CA:  MOVF   FF4,W
01CC:  ADDWFC 02,F
01CE:  MOVLW  00
01D0:  ADDWFC 01,F
01D2:  MOVF   x6B,W
01D4:  MULWF  x6F
01D6:  MOVF   FF3,W
01D8:  ADDWF  02,F
01DA:  MOVF   FF4,W
01DC:  ADDWFC 01,F
01DE:  INCF   00,F
01E0:  BTFSC  01.7
01E2:  BRA    01EE
01E4:  RLCF   x73,F
01E6:  RLCF   03,F
01E8:  RLCF   02,F
01EA:  RLCF   01,F
01EC:  DECF   00,F
01EE:  MOVLW  00
01F0:  BTFSS  x73.7
01F2:  BRA    0208
01F4:  INCF   03,F
01F6:  ADDWFC 02,F
01F8:  ADDWFC 01,F
01FA:  MOVF   01,W
01FC:  BNZ   0208
01FE:  MOVF   02,W
0200:  BNZ   0208
0202:  MOVF   03,W
0204:  BNZ   0208
0206:  INCF   00,F
0208:  BTFSC  x72.7
020A:  BSF    01.7
020C:  BTFSS  x72.7
020E:  BCF    01.7
0210:  BRA    021A
0212:  CLRF   00
0214:  CLRF   01
0216:  CLRF   02
0218:  CLRF   03
021A:  RETURN 0
021C:  MOVF   x62,W
021E:  BTFSC  FD8.2
0220:  BRA    036C
0222:  MOVWF  x6E
0224:  MOVF   x66,W
0226:  BTFSC  FD8.2
0228:  BRA    036C
022A:  SUBWF  x6E,F
022C:  BNC   0238
022E:  MOVLW  7F
0230:  ADDWF  x6E,F
0232:  BTFSC  FD8.0
0234:  BRA    036C
0236:  BRA    0244
0238:  MOVLW  81
023A:  SUBWF  x6E,F
023C:  BTFSS  FD8.0
023E:  BRA    036C
0240:  BTFSC  FD8.2
0242:  BRA    036C
0244:  MOVFF  6E,00
0248:  CLRF   01
024A:  CLRF   02
024C:  CLRF   03
024E:  CLRF   x6D
0250:  MOVFF  63,6C
0254:  BSF    x6C.7
0256:  MOVFF  64,6B
025A:  MOVFF  65,6A
025E:  MOVLW  19
0260:  MOVWF  x6E
0262:  MOVF   x69,W
0264:  SUBWF  x6A,F
0266:  BC    0282
0268:  MOVLW  01
026A:  SUBWF  x6B,F
026C:  BC    0282
026E:  SUBWF  x6C,F
0270:  BC    0282
0272:  SUBWF  x6D,F
0274:  BC    0282
0276:  INCF   x6D,F
0278:  INCF   x6C,F
027A:  INCF   x6B,F
027C:  MOVF   x69,W
027E:  ADDWF  x6A,F
0280:  BRA    02D2
0282:  MOVF   x68,W
0284:  SUBWF  x6B,F
0286:  BC    02AC
0288:  MOVLW  01
028A:  SUBWF  x6C,F
028C:  BC    02AC
028E:  SUBWF  x6D,F
0290:  BC    02AC
0292:  INCF   x6D,F
0294:  INCF   x6C,F
0296:  MOVF   x68,W
0298:  ADDWF  x6B,F
029A:  MOVF   x69,W
029C:  ADDWF  x6A,F
029E:  BNC   02D2
02A0:  INCF   x6B,F
02A2:  BNZ   02D2
02A4:  INCF   x6C,F
02A6:  BNZ   02D2
02A8:  INCF   x6D,F
02AA:  BRA    02D2
02AC:  MOVF   x67,W
02AE:  IORLW  80
02B0:  SUBWF  x6C,F
02B2:  BC    02D0
02B4:  MOVLW  01
02B6:  SUBWF  x6D,F
02B8:  BC    02D0
02BA:  INCF   x6D,F
02BC:  MOVF   x67,W
02BE:  IORLW  80
02C0:  ADDWF  x6C,F
02C2:  MOVF   x68,W
02C4:  ADDWF  x6B,F
02C6:  BNC   029A
02C8:  INCF   x6C,F
02CA:  BNZ   029A
02CC:  INCF   x6D,F
02CE:  BRA    029A
02D0:  BSF    03.0
02D2:  DECFSZ x6E,F
02D4:  BRA    02D8
02D6:  BRA    02EE
02D8:  BCF    FD8.0
02DA:  RLCF   x6A,F
02DC:  RLCF   x6B,F
02DE:  RLCF   x6C,F
02E0:  RLCF   x6D,F
02E2:  BCF    FD8.0
02E4:  RLCF   03,F
02E6:  RLCF   02,F
02E8:  RLCF   01,F
02EA:  RLCF   x6F,F
02EC:  BRA    0262
02EE:  BTFSS  x6F.0
02F0:  BRA    02FE
02F2:  BCF    FD8.0
02F4:  RRCF   01,F
02F6:  RRCF   02,F
02F8:  RRCF   03,F
02FA:  RRCF   x6F,F
02FC:  BRA    0302
02FE:  DECF   00,F
0300:  BZ    036C
0302:  BTFSC  x6F.7
0304:  BRA    0342
0306:  BCF    FD8.0
0308:  RLCF   x6A,F
030A:  RLCF   x6B,F
030C:  RLCF   x6C,F
030E:  RLCF   x6D,F
0310:  MOVF   x69,W
0312:  SUBWF  x6A,F
0314:  BC    0324
0316:  MOVLW  01
0318:  SUBWF  x6B,F
031A:  BC    0324
031C:  SUBWF  x6C,F
031E:  BC    0324
0320:  SUBWF  x6D,F
0322:  BNC   0358
0324:  MOVF   x68,W
0326:  SUBWF  x6B,F
0328:  BC    0334
032A:  MOVLW  01
032C:  SUBWF  x6C,F
032E:  BC    0334
0330:  SUBWF  x6D,F
0332:  BNC   0358
0334:  MOVF   x67,W
0336:  IORLW  80
0338:  SUBWF  x6C,F
033A:  BC    0342
033C:  MOVLW  01
033E:  SUBWF  x6D,F
0340:  BNC   0358
0342:  INCF   03,F
0344:  BNZ   0358
0346:  INCF   02,F
0348:  BNZ   0358
034A:  INCF   01,F
034C:  BNZ   0358
034E:  INCF   00,F
0350:  BZ    036C
0352:  RRCF   01,F
0354:  RRCF   02,F
0356:  RRCF   03,F
0358:  MOVFF  63,6E
035C:  MOVF   x67,W
035E:  XORWF  x6E,F
0360:  BTFSS  x6E.7
0362:  BRA    0368
0364:  BSF    01.7
0366:  BRA    0374
0368:  BCF    01.7
036A:  BRA    0374
036C:  CLRF   00
036E:  CLRF   01
0370:  CLRF   02
0372:  CLRF   03
0374:  GOTO   06CE (RETURN)
0378:  MOVFF  5F,66
037C:  MOVF   x63,W
037E:  XORWF  x66,F
0380:  BTFSS  x66.7
0382:  BRA    038E
0384:  BCF    FD8.2
0386:  BCF    FD8.0
0388:  BTFSC  5F.7
038A:  BSF    FD8.0
038C:  BRA    03EC
038E:  MOVFF  5F,66
0392:  MOVFF  62,67
0396:  MOVF   5E,W
0398:  SUBWF  x67,F
039A:  BZ    03A8
039C:  BTFSS  x66.7
039E:  BRA    03EC
03A0:  MOVF   FD8,W
03A2:  XORLW  01
03A4:  MOVWF  FD8
03A6:  BRA    03EC
03A8:  MOVFF  63,67
03AC:  MOVF   5F,W
03AE:  SUBWF  x67,F
03B0:  BZ    03BE
03B2:  BTFSS  x66.7
03B4:  BRA    03EC
03B6:  MOVF   FD8,W
03B8:  XORLW  01
03BA:  MOVWF  FD8
03BC:  BRA    03EC
03BE:  MOVFF  64,67
03C2:  MOVF   x60,W
03C4:  SUBWF  x67,F
03C6:  BZ    03D4
03C8:  BTFSS  x66.7
03CA:  BRA    03EC
03CC:  MOVF   FD8,W
03CE:  XORLW  01
03D0:  MOVWF  FD8
03D2:  BRA    03EC
03D4:  MOVFF  65,67
03D8:  MOVF   x61,W
03DA:  SUBWF  x67,F
03DC:  BZ    03EA
03DE:  BTFSS  x66.7
03E0:  BRA    03EC
03E2:  MOVF   FD8,W
03E4:  XORLW  01
03E6:  MOVWF  FD8
03E8:  BRA    03EC
03EA:  BCF    FD8.0
03EC:  GOTO   06FA (RETURN)
03F0:  MOVLW  80
03F2:  BTFSC  FD8.1
03F4:  XORWF  x6B,F
03F6:  CLRF   x70
03F8:  CLRF   x71
03FA:  MOVFF  67,6F
03FE:  MOVF   x6B,W
0400:  XORWF  x6F,F
0402:  MOVF   x66,W
0404:  BTFSC  FD8.2
0406:  BRA    05C0
0408:  MOVWF  x6E
040A:  MOVWF  00
040C:  MOVF   x6A,W
040E:  BTFSC  FD8.2
0410:  BRA    05D2
0412:  SUBWF  x6E,F
0414:  BTFSC  FD8.2
0416:  BRA    051A
0418:  BNC   0494
041A:  MOVFF  6B,74
041E:  BSF    x74.7
0420:  MOVFF  6C,73
0424:  MOVFF  6D,72
0428:  CLRF   x71
042A:  BCF    FD8.0
042C:  RRCF   x74,F
042E:  RRCF   x73,F
0430:  RRCF   x72,F
0432:  RRCF   x71,F
0434:  DECFSZ x6E,F
0436:  BRA    0428
0438:  BTFSS  x6F.7
043A:  BRA    0442
043C:  BSF    x70.0
043E:  BRA    05FA
0440:  BCF    x70.0
0442:  BCF    x6E.0
0444:  BSF    x70.4
0446:  CLRF   FEA
0448:  MOVLW  69
044A:  MOVWF  FE9
044C:  BRA    0620
044E:  BCF    x70.4
0450:  BTFSC  x6F.7
0452:  BRA    0468
0454:  BTFSS  x6E.0
0456:  BRA    047E
0458:  RRCF   x74,F
045A:  RRCF   x73,F
045C:  RRCF   x72,F
045E:  RRCF   x71,F
0460:  INCF   00,F
0462:  BTFSC  FD8.2
0464:  BRA    05F0
0466:  BRA    047E
0468:  BTFSC  x74.7
046A:  BRA    0484
046C:  BCF    FD8.0
046E:  RLCF   x71,F
0470:  RLCF   x72,F
0472:  RLCF   x73,F
0474:  RLCF   x74,F
0476:  DECF   00,F
0478:  BTFSC  FD8.2
047A:  BRA    05F0
047C:  BRA    0468
047E:  BSF    x70.6
0480:  BRA    0558
0482:  BCF    x70.6
0484:  MOVFF  67,6F
0488:  BTFSS  x67.7
048A:  BRA    0490
048C:  BSF    x74.7
048E:  BRA    05E2
0490:  BCF    x74.7
0492:  BRA    05E2
0494:  MOVFF  6A,6E
0498:  MOVFF  6A,00
049C:  MOVF   x66,W
049E:  SUBWF  x6E,F
04A0:  MOVFF  67,74
04A4:  BSF    x74.7
04A6:  MOVFF  68,73
04AA:  MOVFF  69,72
04AE:  CLRF   x71
04B0:  BCF    FD8.0
04B2:  RRCF   x74,F
04B4:  RRCF   x73,F
04B6:  RRCF   x72,F
04B8:  RRCF   x71,F
04BA:  DECFSZ x6E,F
04BC:  BRA    04AE
04BE:  BTFSS  x6F.7
04C0:  BRA    04C8
04C2:  BSF    x70.1
04C4:  BRA    05FA
04C6:  BCF    x70.1
04C8:  BCF    x6E.0
04CA:  BSF    x70.5
04CC:  CLRF   FEA
04CE:  MOVLW  6D
04D0:  MOVWF  FE9
04D2:  BRA    0620
04D4:  BCF    x70.5
04D6:  BTFSC  x6F.7
04D8:  BRA    04EE
04DA:  BTFSS  x6E.0
04DC:  BRA    0504
04DE:  RRCF   x74,F
04E0:  RRCF   x73,F
04E2:  RRCF   x72,F
04E4:  RRCF   x71,F
04E6:  INCF   00,F
04E8:  BTFSC  FD8.2
04EA:  BRA    05F0
04EC:  BRA    0504
04EE:  BTFSC  x74.7
04F0:  BRA    050A
04F2:  BCF    FD8.0
04F4:  RLCF   x71,F
04F6:  RLCF   x72,F
04F8:  RLCF   x73,F
04FA:  RLCF   x74,F
04FC:  DECF   00,F
04FE:  BTFSC  FD8.2
0500:  BRA    05F0
0502:  BRA    04EE
0504:  BSF    x70.7
0506:  BRA    0558
0508:  BCF    x70.7
050A:  MOVFF  6B,6F
050E:  BTFSS  x6B.7
0510:  BRA    0516
0512:  BSF    x74.7
0514:  BRA    05E2
0516:  BCF    x74.7
0518:  BRA    05E2
051A:  MOVFF  6B,74
051E:  BSF    x74.7
0520:  MOVFF  6C,73
0524:  MOVFF  6D,72
0528:  BTFSS  x6F.7
052A:  BRA    0534
052C:  BCF    x74.7
052E:  BSF    x70.2
0530:  BRA    05FA
0532:  BCF    x70.2
0534:  CLRF   x71
0536:  BCF    x6E.0
0538:  CLRF   FEA
053A:  MOVLW  69
053C:  MOVWF  FE9
053E:  BRA    0620
0540:  BTFSC  x6F.7
0542:  BRA    057C
0544:  MOVFF  67,6F
0548:  BTFSS  x6E.0
054A:  BRA    0558
054C:  RRCF   x74,F
054E:  RRCF   x73,F
0550:  RRCF   x72,F
0552:  RRCF   x71,F
0554:  INCF   00,F
0556:  BZ    05F0
0558:  BTFSS  x71.7
055A:  BRA    0572
055C:  INCF   x72,F
055E:  BNZ   0572
0560:  INCF   x73,F
0562:  BNZ   0572
0564:  INCF   x74,F
0566:  BNZ   0572
0568:  RRCF   x74,F
056A:  RRCF   x73,F
056C:  RRCF   x72,F
056E:  INCF   00,F
0570:  BZ    05F0
0572:  BTFSC  x70.6
0574:  BRA    0482
0576:  BTFSC  x70.7
0578:  BRA    0508
057A:  BRA    05B4
057C:  MOVLW  80
057E:  XORWF  x74,F
0580:  BTFSS  x74.7
0582:  BRA    058C
0584:  BRA    05FA
0586:  MOVFF  6B,6F
058A:  BRA    05A0
058C:  MOVFF  67,6F
0590:  MOVF   x74,F
0592:  BNZ   05A0
0594:  MOVF   x73,F
0596:  BNZ   05A0
0598:  MOVF   x72,F
059A:  BNZ   05A0
059C:  CLRF   00
059E:  BRA    05E2
05A0:  BTFSC  x74.7
05A2:  BRA    05B4
05A4:  BCF    FD8.0
05A6:  RLCF   x71,F
05A8:  RLCF   x72,F
05AA:  RLCF   x73,F
05AC:  RLCF   x74,F
05AE:  DECFSZ 00,F
05B0:  BRA    05A0
05B2:  BRA    05F0
05B4:  BTFSS  x6F.7
05B6:  BRA    05BC
05B8:  BSF    x74.7
05BA:  BRA    05E2
05BC:  BCF    x74.7
05BE:  BRA    05E2
05C0:  MOVFF  6A,00
05C4:  MOVFF  6B,74
05C8:  MOVFF  6C,73
05CC:  MOVFF  6D,72
05D0:  BRA    05E2
05D2:  MOVFF  66,00
05D6:  MOVFF  67,74
05DA:  MOVFF  68,73
05DE:  MOVFF  69,72
05E2:  MOVFF  74,01
05E6:  MOVFF  73,02
05EA:  MOVFF  72,03
05EE:  BRA    0658
05F0:  CLRF   00
05F2:  CLRF   01
05F4:  CLRF   02
05F6:  CLRF   03
05F8:  BRA    0658
05FA:  CLRF   x71
05FC:  COMF   x72,F
05FE:  COMF   x73,F
0600:  COMF   x74,F
0602:  COMF   x71,F
0604:  INCF   x71,F
0606:  BNZ   0612
0608:  INCF   x72,F
060A:  BNZ   0612
060C:  INCF   x73,F
060E:  BNZ   0612
0610:  INCF   x74,F
0612:  BTFSC  x70.0
0614:  BRA    0440
0616:  BTFSC  x70.1
0618:  BRA    04C6
061A:  BTFSC  x70.2
061C:  BRA    0532
061E:  BRA    0586
0620:  MOVF   FEF,W
0622:  ADDWF  x72,F
0624:  BNC   0630
0626:  INCF   x73,F
0628:  BNZ   0630
062A:  INCF   x74,F
062C:  BTFSC  FD8.2
062E:  BSF    x6E.0
0630:  MOVF   FED,F
0632:  MOVF   FEF,W
0634:  ADDWF  x73,F
0636:  BNC   063E
0638:  INCF   x74,F
063A:  BTFSC  FD8.2
063C:  BSF    x6E.0
063E:  MOVF   FED,F
0640:  MOVF   FEF,W
0642:  BTFSC  FEF.7
0644:  BRA    0648
0646:  XORLW  80
0648:  ADDWF  x74,F
064A:  BTFSC  FD8.0
064C:  BSF    x6E.0
064E:  BTFSC  x70.4
0650:  BRA    044E
0652:  BTFSC  x70.5
0654:  BRA    04D4
0656:  BRA    0540
0658:  RETURN 0
*
0868:  DATA 54,72
086A:  DATA 61,6D
086C:  DATA 61,20
086E:  DATA 72,65
0870:  DATA 63,69
0872:  DATA 62,69
0874:  DATA 64,61
0876:  DATA 3A,20
0878:  DATA 64,75
087A:  DATA 74,79
087C:  DATA 3D,25
087E:  DATA 64,2C
0880:  DATA 20,65
0882:  DATA 73,74
0884:  DATA 61,64
0886:  DATA 6F,3D
0888:  DATA 25,64
088A:  DATA 0A,00
088C:  DATA 4D,6F
088E:  DATA 74,6F
0890:  DATA 72,20
0892:  DATA 65,6E
0894:  DATA 63,65
0896:  DATA 6E,64
0898:  DATA 69,64
089A:  DATA 6F,3A
089C:  DATA 20,64
089E:  DATA 75,74
08A0:  DATA 79,3D
08A2:  DATA 25,64
08A4:  DATA 0A,00
08A6:  DATA 4D,6F
08A8:  DATA 74,6F
08AA:  DATA 72,20
08AC:  DATA 61,70
08AE:  DATA 61,67
08B0:  DATA 61,64
08B2:  DATA 6F,0A
08B4:  DATA 00,00
08B6:  DATA 25,2E
08B8:  DATA 32,66
08BA:  DATA 20,2D
08BC:  DATA 0A,00
08BE:  TBLRD*+
08C0:  MOVFF  FF6,47
08C4:  MOVFF  FF7,48
08C8:  MOVF   FF5,W
08CA:  BTFSS  F9E.4
08CC:  BRA    08CA
08CE:  MOVWF  FAD
08D0:  MOVFF  47,FF6
08D4:  MOVFF  48,FF7
08D8:  DECFSZ 46,F
08DA:  BRA    08BE
08DC:  RETURN 0
08DE:  MOVF   4D,W
08E0:  CLRF   01
08E2:  SUBWF  4C,W
08E4:  BC    08EC
08E6:  MOVFF  4C,00
08EA:  BRA    0904
08EC:  CLRF   00
08EE:  MOVLW  08
08F0:  MOVWF  4E
08F2:  RLCF   4C,F
08F4:  RLCF   00,F
08F6:  MOVF   4D,W
08F8:  SUBWF  00,W
08FA:  BTFSC  FD8.0
08FC:  MOVWF  00
08FE:  RLCF   01,F
0900:  DECFSZ 4E,F
0902:  BRA    08F2
0904:  RETURN 0
0906:  MOVLW  20
0908:  BTFSS  47.4
090A:  MOVLW  30
090C:  MOVWF  48
090E:  MOVFF  46,00
0912:  BTFSS  46.7
0914:  BRA    0926
0916:  COMF   00,F
0918:  INCF   00,F
091A:  MOVFF  00,46
091E:  MOVLW  2D
0920:  MOVWF  48
0922:  BSF    47.7
0924:  BSF    47.0
0926:  MOVF   01,W
0928:  MOVFF  46,4C
092C:  MOVLW  64
092E:  MOVWF  4D
0930:  RCALL  08DE
0932:  MOVFF  00,46
0936:  MOVLW  30
0938:  ADDWF  01,W
093A:  MOVWF  49
093C:  MOVFF  46,4C
0940:  MOVLW  0A
0942:  MOVWF  4D
0944:  RCALL  08DE
0946:  MOVLW  30
0948:  ADDWF  00,W
094A:  MOVWF  4B
094C:  MOVLW  30
094E:  ADDWF  01,W
0950:  MOVWF  4A
0952:  MOVFF  48,00
0956:  MOVLW  30
0958:  SUBWF  49,W
095A:  BZ    0964
095C:  BSF    47.1
095E:  BTFSC  47.7
0960:  BSF    47.2
0962:  BRA    0988
0964:  MOVFF  48,49
0968:  MOVLW  20
096A:  MOVWF  48
096C:  MOVLW  30
096E:  SUBWF  4A,W
0970:  BZ    097A
0972:  BSF    47.0
0974:  BTFSC  47.7
0976:  BSF    47.1
0978:  BRA    0988
097A:  BTFSS  FD8.2
097C:  BSF    47.0
097E:  BNZ   0988
0980:  MOVFF  49,4A
0984:  MOVLW  20
0986:  MOVWF  49
0988:  BTFSC  47.2
098A:  BRA    0996
098C:  BTFSC  47.1
098E:  BRA    099E
0990:  BTFSC  47.0
0992:  BRA    09A6
0994:  BRA    09AE
0996:  MOVF   48,W
0998:  BTFSS  F9E.4
099A:  BRA    0998
099C:  MOVWF  FAD
099E:  MOVF   49,W
09A0:  BTFSS  F9E.4
09A2:  BRA    09A0
09A4:  MOVWF  FAD
09A6:  MOVF   4A,W
09A8:  BTFSS  F9E.4
09AA:  BRA    09A8
09AC:  MOVWF  FAD
09AE:  MOVF   4B,W
09B0:  BTFSS  F9E.4
09B2:  BRA    09B0
09B4:  MOVWF  FAD
09B6:  RETURN 0
*
0A20:  TBLRD*+
0A22:  MOVF   FF5,F
0A24:  BZ    0A40
0A26:  MOVFF  FF6,44
0A2A:  MOVFF  FF7,45
0A2E:  MOVF   FF5,W
0A30:  BTFSS  F9E.4
0A32:  BRA    0A30
0A34:  MOVWF  FAD
0A36:  MOVFF  44,FF6
0A3A:  MOVFF  45,FF7
0A3E:  BRA    0A20
0A40:  GOTO   0E06 (RETURN)
0A44:  MOVF   51,W
0A46:  SUBLW  B6
0A48:  MOVWF  51
0A4A:  CLRF   03
0A4C:  MOVFF  52,55
0A50:  BSF    52.7
0A52:  BCF    FD8.0
0A54:  RRCF   52,F
0A56:  RRCF   53,F
0A58:  RRCF   54,F
0A5A:  RRCF   03,F
0A5C:  RRCF   02,F
0A5E:  RRCF   01,F
0A60:  RRCF   00,F
0A62:  DECFSZ 51,F
0A64:  BRA    0A52
0A66:  BTFSS  55.7
0A68:  BRA    0A80
0A6A:  COMF   00,F
0A6C:  COMF   01,F
0A6E:  COMF   02,F
0A70:  COMF   03,F
0A72:  INCF   00,F
0A74:  BTFSC  FD8.2
0A76:  INCF   01,F
0A78:  BTFSC  FD8.2
0A7A:  INCF   02,F
0A7C:  BTFSC  FD8.2
0A7E:  INCF   03,F
0A80:  GOTO   0B6E (RETURN)
0A84:  BTFSC  FD8.1
0A86:  BRA    0A8E
0A88:  CLRF   FEA
0A8A:  MOVLW  59
0A8C:  MOVWF  FE9
0A8E:  CLRF   00
0A90:  CLRF   01
0A92:  CLRF   02
0A94:  CLRF   03
0A96:  CLRF   59
0A98:  CLRF   5A
0A9A:  CLRF   5B
0A9C:  CLRF   5C
0A9E:  MOVF   58,W
0AA0:  IORWF  57,W
0AA2:  IORWF  56,W
0AA4:  IORWF  55,W
0AA6:  BZ    0B00
0AA8:  MOVLW  20
0AAA:  MOVWF  5D
0AAC:  BCF    FD8.0
0AAE:  RLCF   51,F
0AB0:  RLCF   52,F
0AB2:  RLCF   53,F
0AB4:  RLCF   54,F
0AB6:  RLCF   59,F
0AB8:  RLCF   5A,F
0ABA:  RLCF   5B,F
0ABC:  RLCF   5C,F
0ABE:  MOVF   58,W
0AC0:  SUBWF  5C,W
0AC2:  BNZ   0AD4
0AC4:  MOVF   57,W
0AC6:  SUBWF  5B,W
0AC8:  BNZ   0AD4
0ACA:  MOVF   56,W
0ACC:  SUBWF  5A,W
0ACE:  BNZ   0AD4
0AD0:  MOVF   55,W
0AD2:  SUBWF  59,W
0AD4:  BNC   0AF4
0AD6:  MOVF   55,W
0AD8:  SUBWF  59,F
0ADA:  MOVF   56,W
0ADC:  BTFSS  FD8.0
0ADE:  INCFSZ 56,W
0AE0:  SUBWF  5A,F
0AE2:  MOVF   57,W
0AE4:  BTFSS  FD8.0
0AE6:  INCFSZ 57,W
0AE8:  SUBWF  5B,F
0AEA:  MOVF   58,W
0AEC:  BTFSS  FD8.0
0AEE:  INCFSZ 58,W
0AF0:  SUBWF  5C,F
0AF2:  BSF    FD8.0
0AF4:  RLCF   00,F
0AF6:  RLCF   01,F
0AF8:  RLCF   02,F
0AFA:  RLCF   03,F
0AFC:  DECFSZ 5D,F
0AFE:  BRA    0AAC
0B00:  MOVFF  59,FEF
0B04:  MOVFF  5A,FEC
0B08:  MOVFF  5B,FEC
0B0C:  MOVFF  5C,FEC
0B10:  RETURN 0
0B12:  MOVF   FE9,W
0B14:  MOVWF  49
0B16:  MOVF   48,W
0B18:  MOVWF  4B
0B1A:  BZ    0B5C
0B1C:  CLRF   19
0B1E:  BTFSC  FF2.7
0B20:  BSF    19.7
0B22:  BCF    FF2.7
0B24:  MOVFF  47,6D
0B28:  MOVFF  46,6C
0B2C:  MOVFF  45,6B
0B30:  MOVFF  44,6A
0B34:  CLRF   x71
0B36:  CLRF   x70
0B38:  MOVLW  20
0B3A:  MOVWF  x6F
0B3C:  MOVLW  82
0B3E:  MOVWF  x6E
0B40:  CALL   012A
0B44:  BTFSC  19.7
0B46:  BSF    FF2.7
0B48:  MOVFF  03,47
0B4C:  MOVFF  02,46
0B50:  MOVFF  01,45
0B54:  MOVFF  00,44
0B58:  DECFSZ 4B,F
0B5A:  BRA    0B1C
0B5C:  MOVFF  47,54
0B60:  MOVFF  46,53
0B64:  MOVFF  45,52
0B68:  MOVFF  44,51
0B6C:  BRA    0A44
0B6E:  MOVFF  03,47
0B72:  MOVFF  02,46
0B76:  MOVFF  01,45
0B7A:  MOVFF  00,44
0B7E:  BTFSS  47.7
0B80:  BRA    0B9C
0B82:  DECF   49,F
0B84:  BSF    49.5
0B86:  COMF   44,F
0B88:  COMF   45,F
0B8A:  COMF   46,F
0B8C:  COMF   47,F
0B8E:  INCF   44,F
0B90:  BTFSC  FD8.2
0B92:  INCF   45,F
0B94:  BTFSC  FD8.2
0B96:  INCF   46,F
0B98:  BTFSC  FD8.2
0B9A:  INCF   47,F
0B9C:  MOVLW  3B
0B9E:  MOVWF  50
0BA0:  MOVLW  9A
0BA2:  MOVWF  4F
0BA4:  MOVLW  CA
0BA6:  MOVWF  4E
0BA8:  CLRF   4D
0BAA:  MOVLW  0A
0BAC:  MOVWF  4B
0BAE:  MOVF   48,W
0BB0:  BTFSC  FD8.2
0BB2:  INCF   49,F
0BB4:  BSF    FD8.1
0BB6:  CLRF   FEA
0BB8:  MOVLW  44
0BBA:  MOVWF  FE9
0BBC:  MOVFF  47,54
0BC0:  MOVFF  46,53
0BC4:  MOVFF  45,52
0BC8:  MOVFF  44,51
0BCC:  MOVFF  50,58
0BD0:  MOVFF  4F,57
0BD4:  MOVFF  4E,56
0BD8:  MOVFF  4D,55
0BDC:  RCALL  0A84
0BDE:  MOVF   01,W
0BE0:  MOVF   00,F
0BE2:  BNZ   0C02
0BE4:  INCF   48,W
0BE6:  SUBWF  4B,W
0BE8:  BZ    0C02
0BEA:  MOVF   49,W
0BEC:  BZ    0C06
0BEE:  ANDLW  0F
0BF0:  SUBWF  4B,W
0BF2:  BZ    0BF6
0BF4:  BC    0C6C
0BF6:  BTFSC  49.7
0BF8:  BRA    0C6C
0BFA:  BTFSC  49.6
0BFC:  BRA    0C06
0BFE:  MOVLW  20
0C00:  BRA    0C62
0C02:  MOVLW  20
0C04:  ANDWF  49,F
0C06:  BTFSS  49.5
0C08:  BRA    0C24
0C0A:  BCF    49.5
0C0C:  MOVF   48,W
0C0E:  BTFSS  FD8.2
0C10:  DECF   49,F
0C12:  MOVF   00,W
0C14:  MOVWF  49
0C16:  MOVLW  2D
0C18:  BTFSS  F9E.4
0C1A:  BRA    0C18
0C1C:  MOVWF  FAD
0C1E:  MOVF   49,W
0C20:  MOVWF  00
0C22:  CLRF   49
0C24:  MOVF   48,W
0C26:  SUBWF  4B,W
0C28:  BNZ   0C40
0C2A:  MOVF   00,W
0C2C:  MOVWF  49
0C2E:  MOVLW  2E
0C30:  BTFSS  F9E.4
0C32:  BRA    0C30
0C34:  MOVWF  FAD
0C36:  MOVF   49,W
0C38:  MOVWF  00
0C3A:  MOVLW  20
0C3C:  ANDWF  49,F
0C3E:  MOVLW  00
0C40:  MOVLW  30
0C42:  BTFSS  49.5
0C44:  BRA    0C62
0C46:  BCF    49.5
0C48:  MOVF   48,W
0C4A:  BTFSS  FD8.2
0C4C:  DECF   49,F
0C4E:  MOVF   00,W
0C50:  MOVWF  49
0C52:  MOVLW  2D
0C54:  BTFSS  F9E.4
0C56:  BRA    0C54
0C58:  MOVWF  FAD
0C5A:  MOVF   49,W
0C5C:  MOVWF  00
0C5E:  CLRF   49
0C60:  MOVLW  30
0C62:  ADDWF  00,F
0C64:  MOVF   00,W
0C66:  BTFSS  F9E.4
0C68:  BRA    0C66
0C6A:  MOVWF  FAD
0C6C:  BCF    FD8.1
0C6E:  MOVFF  50,54
0C72:  MOVFF  4F,53
0C76:  MOVFF  4E,52
0C7A:  MOVFF  4D,51
0C7E:  CLRF   58
0C80:  CLRF   57
0C82:  CLRF   56
0C84:  MOVLW  0A
0C86:  MOVWF  55
0C88:  RCALL  0A84
0C8A:  MOVFF  03,50
0C8E:  MOVFF  02,4F
0C92:  MOVFF  01,4E
0C96:  MOVFF  00,4D
0C9A:  DECFSZ 4B,F
0C9C:  BRA    0BB4
0C9E:  GOTO   0E2A (RETURN)
.................... 
.................... #list
.................... 
.................... 
.................... #use delay(internal=4MHz)
.................... #fuses XT, NOWDT, NOPLLEN, NOLVP
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, stream=PC, parity=N, bits=8)
.................... 
.................... //==================== VARIABLES GLOBALES ====================
.................... 
.................... int timer2 = 88;                // Se carga timer 2 con 88 para obtener 700 Hz
.................... int poscaler = 1;               // Poscaler solo puede tomar valores de: 1
.................... volatile int int_encoder = 0;   // Contador del encoder
.................... volatile int count = 0;         // Contador para el Timer0
.................... int resolucion = 8;             // Resolucion del encoder (8 pulsos por vuelta)
.................... 
.................... int duty = 11;                  // Ciclo de trabajo inicial 
.................... int estado = 0;                 // Motor encendido o apagado
.................... 
.................... const int16 duty_porcentual[11] = {
....................     0, 36, 72, 108, 144, 180, 216, 252, 288, 324, 356
.................... };
.................... 
.................... float rpm_actual = 0.0;         // Almacena el valor actual de RPM
.................... float rpm_anterior = 0.0;       // Almacena el valor anterior de RPM
.................... float rpm = 0.0;                // Almacena el valor filtrado de RPM
.................... float alpha = 0.8;              // Coeficiente de filtro exponencial
.................... float beta = 0.0;               // Ajuste del error
.................... 
.................... char buffer[10];                // Buffer para la trama
.................... volatile int i = 0;
.................... volatile int datos_listos = 0;
.................... volatile int rpm_listo = 0;     // Bandera que indica que el RPM fue actualizado
.................... 
.................... //==================== INTERRUPCIONES ====================
.................... 
.................... #INT_EXT                            // Interrupción externa (pulsos del encoder)
.................... void EXT_isr(){
....................     int_encoder++;                  // Incrementa contador del encoder
*
00EC:  INCF   1C,F
.................... }
.................... 
00EE:  BCF    FF2.1
00F0:  GOTO   0078
.................... #INT_TIMER0                         // Interrupción del Timer0 (cálculo de RPM)
.................... void TIMER0_isr(){
....................     set_timer0(6);                  // Precarga ajustada para 64 ms por interrupción
*
065A:  CLRF   FD7
065C:  MOVLW  06
065E:  MOVWF  FD6
0660:  NOP   
....................     count++;                        // Incrementar el contador
0662:  INCF   1D,F
.................... 
....................     if (count >= 4) {               // 256 ms
0664:  MOVF   1D,W
0666:  SUBLW  03
0668:  BTFSC  FD8.0
066A:  BRA    082E
....................         count = 0;                // Reinicia el contador
066C:  CLRF   1D
.................... 
....................         rpm_actual = (int_encoder * 240.0) / resolucion; // Calcula RPM (60 * 4)
066E:  CLRF   x63
0670:  MOVFF  1C,62
0674:  RCALL  00F4
0676:  MOVFF  03,6D
067A:  MOVFF  02,6C
067E:  MOVFF  01,6B
0682:  MOVFF  00,6A
0686:  CLRF   x71
0688:  CLRF   x70
068A:  MOVLW  70
068C:  MOVWF  x6F
068E:  MOVLW  86
0690:  MOVWF  x6E
0692:  RCALL  012A
0694:  MOVFF  03,61
0698:  MOVFF  02,60
069C:  MOVFF  01,5F
06A0:  MOVFF  00,5E
06A4:  CLRF   x63
06A6:  MOVFF  1E,62
06AA:  RCALL  00F4
06AC:  MOVFF  61,65
06B0:  MOVFF  60,64
06B4:  MOVFF  5F,63
06B8:  MOVFF  5E,62
06BC:  MOVFF  03,69
06C0:  MOVFF  02,68
06C4:  MOVFF  01,67
06C8:  MOVFF  00,66
06CC:  BRA    021C
06CE:  MOVFF  03,24
06D2:  MOVFF  02,23
06D6:  MOVFF  01,22
06DA:  MOVFF  00,21
....................         int_encoder = 0;          // Reinicia contador del encoder
06DE:  CLRF   1C
.................... 
....................         if (rpm_anterior != 0) {  // Aplicar el filtro exponencial
06E0:  MOVFF  28,61
06E4:  MOVFF  27,60
06E8:  MOVFF  26,5F
06EC:  MOVFF  25,5E
06F0:  CLRF   x65
06F2:  CLRF   x64
06F4:  CLRF   x63
06F6:  CLRF   x62
06F8:  BRA    0378
06FA:  BTFSC  FD8.2
06FC:  BRA    0806
....................             rpm = (beta + 1) * (alpha * rpm_actual + ((1 - alpha) * rpm_anterior));
06FE:  BCF    FD8.1
0700:  MOVFF  34,69
0704:  MOVFF  33,68
0708:  MOVFF  32,67
070C:  MOVFF  31,66
0710:  CLRF   x6D
0712:  CLRF   x6C
0714:  CLRF   x6B
0716:  MOVLW  7F
0718:  MOVWF  x6A
071A:  RCALL  03F0
071C:  MOVFF  03,61
0720:  MOVFF  02,60
0724:  MOVFF  01,5F
0728:  MOVFF  00,5E
072C:  MOVFF  30,6D
0730:  MOVFF  2F,6C
0734:  MOVFF  2E,6B
0738:  MOVFF  2D,6A
073C:  MOVFF  24,71
0740:  MOVFF  23,70
0744:  MOVFF  22,6F
0748:  MOVFF  21,6E
074C:  RCALL  012A
074E:  MOVFF  03,65
0752:  MOVFF  02,64
0756:  MOVFF  01,63
075A:  MOVFF  00,62
075E:  BSF    FD8.1
0760:  CLRF   x69
0762:  CLRF   x68
0764:  CLRF   x67
0766:  MOVLW  7F
0768:  MOVWF  x66
076A:  MOVFF  30,6D
076E:  MOVFF  2F,6C
0772:  MOVFF  2E,6B
0776:  MOVFF  2D,6A
077A:  RCALL  03F0
077C:  MOVFF  03,69
0780:  MOVFF  02,68
0784:  MOVFF  01,67
0788:  MOVFF  00,66
078C:  MOVFF  03,6D
0790:  MOVFF  02,6C
0794:  MOVFF  01,6B
0798:  MOVFF  00,6A
079C:  MOVFF  28,71
07A0:  MOVFF  27,70
07A4:  MOVFF  26,6F
07A8:  MOVFF  25,6E
07AC:  RCALL  012A
07AE:  BCF    FD8.1
07B0:  MOVFF  65,69
07B4:  MOVFF  64,68
07B8:  MOVFF  63,67
07BC:  MOVFF  62,66
07C0:  MOVFF  03,6D
07C4:  MOVFF  02,6C
07C8:  MOVFF  01,6B
07CC:  MOVFF  00,6A
07D0:  RCALL  03F0
07D2:  MOVFF  61,6D
07D6:  MOVFF  60,6C
07DA:  MOVFF  5F,6B
07DE:  MOVFF  5E,6A
07E2:  MOVFF  03,71
07E6:  MOVFF  02,70
07EA:  MOVFF  01,6F
07EE:  MOVFF  00,6E
07F2:  RCALL  012A
07F4:  MOVFF  03,2C
07F8:  MOVFF  02,2B
07FC:  MOVFF  01,2A
0800:  MOVFF  00,29
....................         } else {
0804:  BRA    0816
....................             rpm = rpm_actual;
0806:  MOVFF  24,2C
080A:  MOVFF  23,2B
080E:  MOVFF  22,2A
0812:  MOVFF  21,29
....................         }
....................         rpm_anterior = rpm;       // Actualiza rpm_anterior
0816:  MOVFF  2C,28
081A:  MOVFF  2B,27
081E:  MOVFF  2A,26
0822:  MOVFF  29,25
.................... 
....................         if (estado == 1) {        // Si el motor está encendido, notifica el nuevo RPM
0826:  DECFSZ 20,W
0828:  BRA    082E
....................             rpm_listo = 1;
082A:  MOVLW  01
082C:  MOVWF  41
....................         }
....................     }
.................... }
.................... 
082E:  BCF    FF2.2
0830:  GOTO   0078
.................... #INT_RDA                            // Interrupción de recepción de datos seriales (RS232)
.................... void RDA_isr() {
0834:  BTFSS  F9E.5
0836:  BRA    0834
0838:  MOVFF  FAE,5E
....................     char c = getc();
....................     if (c == 0xFF) {                // Caracter de inicio
083C:  INCFSZ 5E,W
083E:  BRA    0842
....................         i = 0;                      // Reinicia el índice del buffer
0840:  CLRF   3F
....................     }
....................     buffer[i] = c;
0842:  CLRF   03
0844:  MOVF   3F,W
0846:  ADDLW  35
0848:  MOVWF  FE9
084A:  MOVLW  00
084C:  ADDWFC 03,W
084E:  MOVWF  FEA
0850:  MOVFF  5E,FEF
....................     i++;
0854:  INCF   3F,F
....................     if (i >= 3) {                   // Longitud de la trama de datos
0856:  MOVF   3F,W
0858:  SUBLW  02
085A:  BC    0862
....................         datos_listos = 1;
085C:  MOVLW  01
085E:  MOVWF  40
....................         i = 0;                      // Reinicia el índice del buffer
0860:  CLRF   3F
....................     }
0862:  BCF    F9E.5
0864:  GOTO   0078
.................... }
.................... 
.................... //==================== FUNCIONES ====================
.................... void parsear_trama(char *buffer) {
....................     if (buffer[0] == 0xFF) {        // Verificar el caracter de inicio
*
09B8:  MOVF   44,W
09BA:  MOVWF  FE9
09BC:  MOVFF  45,FEA
09C0:  INCFSZ FEF,W
09C2:  BRA    0A1C
....................         duty = buffer[1];
09C4:  MOVLW  01
09C6:  ADDWF  44,W
09C8:  MOVWF  FE9
09CA:  MOVLW  00
09CC:  ADDWFC 45,W
09CE:  MOVWF  FEA
09D0:  MOVFF  FEF,1F
....................         estado = buffer[2];
09D4:  MOVLW  02
09D6:  ADDWF  44,W
09D8:  MOVWF  FE9
09DA:  MOVLW  00
09DC:  ADDWFC 45,W
09DE:  MOVWF  FEA
09E0:  MOVFF  FEF,20
....................         printf("Trama recibida: duty=%d, estado=%d\n", duty, estado); // Mensaje de depuración
09E4:  MOVLW  68
09E6:  MOVWF  FF6
09E8:  MOVLW  08
09EA:  MOVWF  FF7
09EC:  MOVLW  15
09EE:  MOVWF  46
09F0:  RCALL  08BE
09F2:  MOVFF  1F,46
09F6:  MOVLW  18
09F8:  MOVWF  47
09FA:  RCALL  0906
09FC:  MOVLW  7F
09FE:  MOVWF  FF6
0A00:  MOVLW  08
0A02:  MOVWF  FF7
0A04:  MOVLW  09
0A06:  MOVWF  46
0A08:  RCALL  08BE
0A0A:  MOVFF  20,46
0A0E:  MOVLW  18
0A10:  MOVWF  47
0A12:  RCALL  0906
0A14:  MOVLW  0A
0A16:  BTFSS  F9E.4
0A18:  BRA    0A16
0A1A:  MOVWF  FAD
....................     }
0A1C:  GOTO   0DA0 (RETURN)
.................... }
.................... 
.................... void main(){
*
0CA2:  CLRF   FF8
0CA4:  BCF    FD0.7
0CA6:  BSF    07.7
0CA8:  MOVLW  50
0CAA:  MOVWF  FD3
0CAC:  CLRF   FD2
0CAE:  CLRF   F9B
0CB0:  BCF    FB8.3
0CB2:  MOVLW  19
0CB4:  MOVWF  FAF
0CB6:  MOVLW  A6
0CB8:  MOVWF  FAC
0CBA:  MOVLW  90
0CBC:  MOVWF  FAB
0CBE:  MOVLW  58
0CC0:  MOVWF  1A
0CC2:  MOVLW  01
0CC4:  MOVWF  1B
0CC6:  CLRF   1C
0CC8:  CLRF   1D
0CCA:  MOVLW  08
0CCC:  MOVWF  1E
0CCE:  MOVLW  0B
0CD0:  MOVWF  1F
0CD2:  CLRF   20
0CD4:  CLRF   24
0CD6:  CLRF   23
0CD8:  CLRF   22
0CDA:  CLRF   21
0CDC:  CLRF   28
0CDE:  CLRF   27
0CE0:  CLRF   26
0CE2:  CLRF   25
0CE4:  CLRF   2C
0CE6:  CLRF   2B
0CE8:  CLRF   2A
0CEA:  CLRF   29
0CEC:  MOVLW  CD
0CEE:  MOVWF  30
0CF0:  MOVLW  CC
0CF2:  MOVWF  2F
0CF4:  MOVLW  4C
0CF6:  MOVWF  2E
0CF8:  MOVLW  7E
0CFA:  MOVWF  2D
0CFC:  CLRF   34
0CFE:  CLRF   33
0D00:  CLRF   32
0D02:  CLRF   31
0D04:  CLRF   3F
0D06:  CLRF   40
0D08:  CLRF   41
0D0A:  CLRF   43
0D0C:  CLRF   42
0D0E:  MOVLB  F
0D10:  CLRF   x5B
0D12:  CLRF   x5C
0D14:  CLRF   x5D
0D16:  CLRF   x5E
0D18:  CLRF   x5F
0D1A:  CLRF   F9A
0D1C:  CLRF   F99
0D1E:  CLRF   F98
....................     // Habilitar interrupciones
....................     enable_interrupts(INT_RDA);
0D20:  BSF    F9D.5
....................     enable_interrupts(INT_EXT);
0D22:  BSF    FF2.4
....................     enable_interrupts(INT_TIMER0);
0D24:  BSF    FF2.5
....................     enable_interrupts(GLOBAL);
0D26:  MOVLW  C0
0D28:  IORWF  FF2,F
.................... 
....................     // Configurar módulos y timers
....................     setup_timer_2(T2_DIV_BY_16, timer2, poscaler);             // Timer2 para PWM (700 Hz)
0D2A:  MOVLW  01
0D2C:  SUBWF  1B,W
0D2E:  MOVWF  01
0D30:  RLCF   01,W
0D32:  MOVWF  00
0D34:  RLCF   00,F
0D36:  RLCF   00,F
0D38:  MOVLW  F8
0D3A:  ANDWF  00,F
0D3C:  MOVF   00,W
0D3E:  IORLW  06
0D40:  MOVWF  FBA
0D42:  MOVFF  1A,FBB
....................     setup_ccp1(CCP_PWM);                                        // Configurar módulo CCP1 en modo PWM
0D46:  BCF    F94.2
0D48:  BCF    F8B.2
0D4A:  MOVLW  0C
0D4C:  MOVWF  FBD
0D4E:  CLRF   FB7
0D50:  CLRF   FB6
0D52:  MOVLW  01
0D54:  MOVWF  FB9
0D56:  BCF    x59.0
....................     setup_timer_0(RTCC_INTERNAL | RTCC_8_BIT | RTCC_DIV_256);   // Configurar Timer0
0D58:  MOVLW  C7
0D5A:  MOVWF  FD5
.................... 
....................     set_pwm1_duty(duty_porcentual[duty]);
0D5C:  BCF    FD8.0
0D5E:  RLCF   1F,W
0D60:  CLRF   03
0D62:  MOVLB  0
0D64:  CALL   00C6
0D68:  TBLRD*+
0D6A:  MOVFF  FF5,03
0D6E:  MOVWF  44
0D70:  MOVFF  03,45
0D74:  RRCF   45,F
0D76:  RRCF   44,F
0D78:  RRCF   45,F
0D7A:  RRCF   44,F
0D7C:  RRCF   45,F
0D7E:  MOVFF  44,FBE
0D82:  RRCF   45,F
0D84:  RRCF   45,W
0D86:  ANDLW  30
0D88:  MOVWF  00
0D8A:  MOVF   FBD,W
0D8C:  ANDLW  CF
0D8E:  IORWF  00,W
0D90:  MOVWF  FBD
.................... 
....................     while (true){
....................         if (datos_listos) {
0D92:  MOVF   40,F
0D94:  BZ    0E06
....................             datos_listos = 0;
0D96:  CLRF   40
....................             parsear_trama(buffer);  // Parsear la trama de datos y actualizar variables
0D98:  CLRF   45
0D9A:  MOVLW  35
0D9C:  MOVWF  44
0D9E:  BRA    09B8
....................             
....................             if (estado) {
0DA0:  MOVF   20,F
0DA2:  BZ    0DFA
....................                 set_pwm1_duty(duty_porcentual[duty]);
0DA4:  BCF    FD8.0
0DA6:  RLCF   1F,W
0DA8:  CLRF   03
0DAA:  CALL   00C6
0DAE:  TBLRD*+
0DB0:  MOVFF  FF5,03
0DB4:  MOVWF  44
0DB6:  MOVFF  03,45
0DBA:  RRCF   45,F
0DBC:  RRCF   44,F
0DBE:  RRCF   45,F
0DC0:  RRCF   44,F
0DC2:  RRCF   45,F
0DC4:  MOVFF  44,FBE
0DC8:  RRCF   45,F
0DCA:  RRCF   45,W
0DCC:  ANDLW  30
0DCE:  MOVWF  00
0DD0:  MOVF   FBD,W
0DD2:  ANDLW  CF
0DD4:  IORWF  00,W
0DD6:  MOVWF  FBD
....................                 printf("Motor encendido: duty=%d\n", duty);
0DD8:  MOVLW  8C
0DDA:  MOVWF  FF6
0DDC:  MOVLW  08
0DDE:  MOVWF  FF7
0DE0:  MOVLW  16
0DE2:  MOVWF  46
0DE4:  RCALL  08BE
0DE6:  MOVFF  1F,46
0DEA:  MOVLW  18
0DEC:  MOVWF  47
0DEE:  RCALL  0906
0DF0:  MOVLW  0A
0DF2:  BTFSS  F9E.4
0DF4:  BRA    0DF2
0DF6:  MOVWF  FAD
....................             } else {
0DF8:  BRA    0E06
....................                 set_pwm1_duty(0);
0DFA:  CLRF   FBE
....................                 printf("Motor apagado\n");
0DFC:  MOVLW  A6
0DFE:  MOVWF  FF6
0E00:  MOVLW  08
0E02:  MOVWF  FF7
0E04:  BRA    0A20
....................             }
....................         }
....................         
....................         // Procesar la impresión del RPM fuera de la ISR
....................         if (rpm_listo) {
0E06:  MOVF   41,F
0E08:  BZ    0E38
....................             rpm_listo = 0;
0E0A:  CLRF   41
....................             if (estado) {
0E0C:  MOVF   20,F
0E0E:  BZ    0E38
....................                 printf("%.2f -\n", rpm);
0E10:  MOVLW  89
0E12:  MOVWF  FE9
0E14:  MOVFF  2C,47
0E18:  MOVFF  2B,46
0E1C:  MOVFF  2A,45
0E20:  MOVFF  29,44
0E24:  MOVLW  02
0E26:  MOVWF  48
0E28:  BRA    0B12
0E2A:  MOVLW  BA
0E2C:  MOVWF  FF6
0E2E:  MOVLW  08
0E30:  MOVWF  FF7
0E32:  MOVLW  03
0E34:  MOVWF  46
0E36:  RCALL  08BE
....................             }
....................         }
0E38:  BRA    0D92
....................     }
.................... }
0E3A:  SLEEP 

Configuration Fuses:
   Word  1: C121   PLL3X NOPLLEN NOCPUDIV LS48MHZ XT PRIMARY_SW FCMEN IESO
   Word  2: 3C5E   PUT BROWNOUT BORV19 NOLPBOR NOWDT WDT32768
   Word  3: D300   CCP2C1 PBADEN T3CKC0 SDOB3 MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
